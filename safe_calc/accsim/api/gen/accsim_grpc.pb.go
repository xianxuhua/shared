// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: accsim.proto

package accsimpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccSimService_AccSceneGet_FullMethodName             = "/accsim.AccSimService/AccSceneGet"
	AccSimService_AccSceneSave_FullMethodName            = "/accsim.AccSimService/AccSceneSave"
	AccSimService_AccSceneDelete_FullMethodName          = "/accsim.AccSimService/AccSceneDelete"
	AccSimService_AccSceneInfo_FullMethodName            = "/accsim.AccSimService/AccSceneInfo"
	AccSimService_PoolFireCalc_FullMethodName            = "/accsim.AccSimService/PoolFireCalc"
	AccSimService_FlowingFireCalc_FullMethodName         = "/accsim.AccSimService/FlowingFireCalc"
	AccSimService_SealRingCalc_FullMethodName            = "/accsim.AccSimService/SealRingCalc"
	AccSimService_JetFireCalc_FullMethodName             = "/accsim.AccSimService/JetFireCalc"
	AccSimService_BallFireCalc_FullMethodName            = "/accsim.AccSimService/BallFireCalc"
	AccSimService_FireExtinguishingDemand_FullMethodName = "/accsim.AccSimService/FireExtinguishingDemand"
	AccSimService_FireExtinguishingSave_FullMethodName   = "/accsim.AccSimService/FireExtinguishingSave"
	AccSimService_CoolingWaterDemand_FullMethodName      = "/accsim.AccSimService/CoolingWaterDemand"
	AccSimService_CoolingWaterSave_FullMethodName        = "/accsim.AccSimService/CoolingWaterSave"
	AccSimService_EquipmentPersonDemand_FullMethodName   = "/accsim.AccSimService/EquipmentPersonDemand"
	AccSimService_EquipmentRequire_FullMethodName        = "/accsim.AccSimService/EquipmentRequire"
	AccSimService_MaterialBurningHeatGet_FullMethodName  = "/accsim.AccSimService/MaterialBurningHeatGet"
	AccSimService_EnterpriseAreaGet_FullMethodName       = "/accsim.AccSimService/EnterpriseAreaGet"
	AccSimService_EnterprisesGet_FullMethodName          = "/accsim.AccSimService/EnterprisesGet"
	AccSimService_EnterpriseGet_FullMethodName           = "/accsim.AccSimService/EnterpriseGet"
)

// AccSimServiceClient is the client API for AccSimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccSimServiceClient interface {
	// 获取所有事故场景
	AccSceneGet(ctx context.Context, in *AccSceneGetRequest, opts ...grpc.CallOption) (*AccSceneGetResponse, error)
	// 保存事故场景
	AccSceneSave(ctx context.Context, in *AccSceneSaveRequest, opts ...grpc.CallOption) (*AccSceneSaveResponse, error)
	// 删除场景
	AccSceneDelete(ctx context.Context, in *AccSceneDeleteRequest, opts ...grpc.CallOption) (*AccSceneDeleteResponse, error)
	// 查看场景
	AccSceneInfo(ctx context.Context, in *AccSceneInfoRequest, opts ...grpc.CallOption) (*AccSceneInfoResponse, error)
	// 池火灾后果计算
	PoolFireCalc(ctx context.Context, in *PoolFireCalcRequest, opts ...grpc.CallOption) (*PoolFireCalcResponse, error)
	// 流淌火后果计算
	FlowingFireCalc(ctx context.Context, in *FlowingFireCalcRequest, opts ...grpc.CallOption) (*FlowingFireCalcResponse, error)
	// 密封圈后果计算
	SealRingCalc(ctx context.Context, in *SealRingCalcRequest, opts ...grpc.CallOption) (*SealRingCalcResponse, error)
	// 喷射火后果计算
	JetFireCalc(ctx context.Context, in *JetFireCalcRequest, opts ...grpc.CallOption) (*JetFireCalcResponse, error)
	// 火球火后果计算
	BallFireCalc(ctx context.Context, in *BallFireCalcRequest, opts ...grpc.CallOption) (*BallFireCalcResponse, error)
	// 灭火剂需求预测
	FireExtinguishingDemand(ctx context.Context, in *FireExtinguishingDemandRequest, opts ...grpc.CallOption) (*FireExtinguishingDemandResponse, error)
	// 保存灭火剂需求预测结果
	FireExtinguishingSave(ctx context.Context, in *FireExtinguishingSaveRequest, opts ...grpc.CallOption) (*FireExtinguishingSaveResponse, error)
	// 冷却水需求计算
	CoolingWaterDemand(ctx context.Context, in *CoolingWaterDemandRequest, opts ...grpc.CallOption) (*CoolingWaterDemandResponse, error)
	// 保存冷却水需求计算结果
	CoolingWaterSave(ctx context.Context, in *CoolingWaterSaveRequest, opts ...grpc.CallOption) (*CoolingWaterSaveResponse, error)
	// 消防装备与人员需求预测
	EquipmentPersonDemand(ctx context.Context, in *EquipmentPersonDemandRequest, opts ...grpc.CallOption) (*EquipmentPersonDemandResponse, error)
	// 根据场景获取灭火剂流量
	EquipmentRequire(ctx context.Context, in *EquipmentRequireRequest, opts ...grpc.CallOption) (*EquipmentRequireResponse, error)
	// 获取物质及燃烧热
	MaterialBurningHeatGet(ctx context.Context, in *MaterialBurningHeatGetRequest, opts ...grpc.CallOption) (*MaterialBurningHeatGetResponse, error)
	// 获取企业区域坐标
	EnterpriseAreaGet(ctx context.Context, in *EnterpriseAreaGetRequest, opts ...grpc.CallOption) (*EnterpriseAreaGetResponse, error)
	// 获取所有企业
	EnterprisesGet(ctx context.Context, in *EnterprisesGetRequest, opts ...grpc.CallOption) (*EnterprisesGetResponse, error)
	// 获取企业信息
	EnterpriseGet(ctx context.Context, in *EnterpriseGetRequest, opts ...grpc.CallOption) (*EnterpriseGetResponse, error)
}

type accSimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccSimServiceClient(cc grpc.ClientConnInterface) AccSimServiceClient {
	return &accSimServiceClient{cc}
}

func (c *accSimServiceClient) AccSceneGet(ctx context.Context, in *AccSceneGetRequest, opts ...grpc.CallOption) (*AccSceneGetResponse, error) {
	out := new(AccSceneGetResponse)
	err := c.cc.Invoke(ctx, AccSimService_AccSceneGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) AccSceneSave(ctx context.Context, in *AccSceneSaveRequest, opts ...grpc.CallOption) (*AccSceneSaveResponse, error) {
	out := new(AccSceneSaveResponse)
	err := c.cc.Invoke(ctx, AccSimService_AccSceneSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) AccSceneDelete(ctx context.Context, in *AccSceneDeleteRequest, opts ...grpc.CallOption) (*AccSceneDeleteResponse, error) {
	out := new(AccSceneDeleteResponse)
	err := c.cc.Invoke(ctx, AccSimService_AccSceneDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) AccSceneInfo(ctx context.Context, in *AccSceneInfoRequest, opts ...grpc.CallOption) (*AccSceneInfoResponse, error) {
	out := new(AccSceneInfoResponse)
	err := c.cc.Invoke(ctx, AccSimService_AccSceneInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) PoolFireCalc(ctx context.Context, in *PoolFireCalcRequest, opts ...grpc.CallOption) (*PoolFireCalcResponse, error) {
	out := new(PoolFireCalcResponse)
	err := c.cc.Invoke(ctx, AccSimService_PoolFireCalc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) FlowingFireCalc(ctx context.Context, in *FlowingFireCalcRequest, opts ...grpc.CallOption) (*FlowingFireCalcResponse, error) {
	out := new(FlowingFireCalcResponse)
	err := c.cc.Invoke(ctx, AccSimService_FlowingFireCalc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) SealRingCalc(ctx context.Context, in *SealRingCalcRequest, opts ...grpc.CallOption) (*SealRingCalcResponse, error) {
	out := new(SealRingCalcResponse)
	err := c.cc.Invoke(ctx, AccSimService_SealRingCalc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) JetFireCalc(ctx context.Context, in *JetFireCalcRequest, opts ...grpc.CallOption) (*JetFireCalcResponse, error) {
	out := new(JetFireCalcResponse)
	err := c.cc.Invoke(ctx, AccSimService_JetFireCalc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) BallFireCalc(ctx context.Context, in *BallFireCalcRequest, opts ...grpc.CallOption) (*BallFireCalcResponse, error) {
	out := new(BallFireCalcResponse)
	err := c.cc.Invoke(ctx, AccSimService_BallFireCalc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) FireExtinguishingDemand(ctx context.Context, in *FireExtinguishingDemandRequest, opts ...grpc.CallOption) (*FireExtinguishingDemandResponse, error) {
	out := new(FireExtinguishingDemandResponse)
	err := c.cc.Invoke(ctx, AccSimService_FireExtinguishingDemand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) FireExtinguishingSave(ctx context.Context, in *FireExtinguishingSaveRequest, opts ...grpc.CallOption) (*FireExtinguishingSaveResponse, error) {
	out := new(FireExtinguishingSaveResponse)
	err := c.cc.Invoke(ctx, AccSimService_FireExtinguishingSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) CoolingWaterDemand(ctx context.Context, in *CoolingWaterDemandRequest, opts ...grpc.CallOption) (*CoolingWaterDemandResponse, error) {
	out := new(CoolingWaterDemandResponse)
	err := c.cc.Invoke(ctx, AccSimService_CoolingWaterDemand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) CoolingWaterSave(ctx context.Context, in *CoolingWaterSaveRequest, opts ...grpc.CallOption) (*CoolingWaterSaveResponse, error) {
	out := new(CoolingWaterSaveResponse)
	err := c.cc.Invoke(ctx, AccSimService_CoolingWaterSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) EquipmentPersonDemand(ctx context.Context, in *EquipmentPersonDemandRequest, opts ...grpc.CallOption) (*EquipmentPersonDemandResponse, error) {
	out := new(EquipmentPersonDemandResponse)
	err := c.cc.Invoke(ctx, AccSimService_EquipmentPersonDemand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) EquipmentRequire(ctx context.Context, in *EquipmentRequireRequest, opts ...grpc.CallOption) (*EquipmentRequireResponse, error) {
	out := new(EquipmentRequireResponse)
	err := c.cc.Invoke(ctx, AccSimService_EquipmentRequire_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) MaterialBurningHeatGet(ctx context.Context, in *MaterialBurningHeatGetRequest, opts ...grpc.CallOption) (*MaterialBurningHeatGetResponse, error) {
	out := new(MaterialBurningHeatGetResponse)
	err := c.cc.Invoke(ctx, AccSimService_MaterialBurningHeatGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) EnterpriseAreaGet(ctx context.Context, in *EnterpriseAreaGetRequest, opts ...grpc.CallOption) (*EnterpriseAreaGetResponse, error) {
	out := new(EnterpriseAreaGetResponse)
	err := c.cc.Invoke(ctx, AccSimService_EnterpriseAreaGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) EnterprisesGet(ctx context.Context, in *EnterprisesGetRequest, opts ...grpc.CallOption) (*EnterprisesGetResponse, error) {
	out := new(EnterprisesGetResponse)
	err := c.cc.Invoke(ctx, AccSimService_EnterprisesGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accSimServiceClient) EnterpriseGet(ctx context.Context, in *EnterpriseGetRequest, opts ...grpc.CallOption) (*EnterpriseGetResponse, error) {
	out := new(EnterpriseGetResponse)
	err := c.cc.Invoke(ctx, AccSimService_EnterpriseGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccSimServiceServer is the server API for AccSimService service.
// All implementations must embed UnimplementedAccSimServiceServer
// for forward compatibility
type AccSimServiceServer interface {
	// 获取所有事故场景
	AccSceneGet(context.Context, *AccSceneGetRequest) (*AccSceneGetResponse, error)
	// 保存事故场景
	AccSceneSave(context.Context, *AccSceneSaveRequest) (*AccSceneSaveResponse, error)
	// 删除场景
	AccSceneDelete(context.Context, *AccSceneDeleteRequest) (*AccSceneDeleteResponse, error)
	// 查看场景
	AccSceneInfo(context.Context, *AccSceneInfoRequest) (*AccSceneInfoResponse, error)
	// 池火灾后果计算
	PoolFireCalc(context.Context, *PoolFireCalcRequest) (*PoolFireCalcResponse, error)
	// 流淌火后果计算
	FlowingFireCalc(context.Context, *FlowingFireCalcRequest) (*FlowingFireCalcResponse, error)
	// 密封圈后果计算
	SealRingCalc(context.Context, *SealRingCalcRequest) (*SealRingCalcResponse, error)
	// 喷射火后果计算
	JetFireCalc(context.Context, *JetFireCalcRequest) (*JetFireCalcResponse, error)
	// 火球火后果计算
	BallFireCalc(context.Context, *BallFireCalcRequest) (*BallFireCalcResponse, error)
	// 灭火剂需求预测
	FireExtinguishingDemand(context.Context, *FireExtinguishingDemandRequest) (*FireExtinguishingDemandResponse, error)
	// 保存灭火剂需求预测结果
	FireExtinguishingSave(context.Context, *FireExtinguishingSaveRequest) (*FireExtinguishingSaveResponse, error)
	// 冷却水需求计算
	CoolingWaterDemand(context.Context, *CoolingWaterDemandRequest) (*CoolingWaterDemandResponse, error)
	// 保存冷却水需求计算结果
	CoolingWaterSave(context.Context, *CoolingWaterSaveRequest) (*CoolingWaterSaveResponse, error)
	// 消防装备与人员需求预测
	EquipmentPersonDemand(context.Context, *EquipmentPersonDemandRequest) (*EquipmentPersonDemandResponse, error)
	// 根据场景获取灭火剂流量
	EquipmentRequire(context.Context, *EquipmentRequireRequest) (*EquipmentRequireResponse, error)
	// 获取物质及燃烧热
	MaterialBurningHeatGet(context.Context, *MaterialBurningHeatGetRequest) (*MaterialBurningHeatGetResponse, error)
	// 获取企业区域坐标
	EnterpriseAreaGet(context.Context, *EnterpriseAreaGetRequest) (*EnterpriseAreaGetResponse, error)
	// 获取所有企业
	EnterprisesGet(context.Context, *EnterprisesGetRequest) (*EnterprisesGetResponse, error)
	// 获取企业信息
	EnterpriseGet(context.Context, *EnterpriseGetRequest) (*EnterpriseGetResponse, error)
	mustEmbedUnimplementedAccSimServiceServer()
}

// UnimplementedAccSimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccSimServiceServer struct {
}

func (UnimplementedAccSimServiceServer) AccSceneGet(context.Context, *AccSceneGetRequest) (*AccSceneGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccSceneGet not implemented")
}
func (UnimplementedAccSimServiceServer) AccSceneSave(context.Context, *AccSceneSaveRequest) (*AccSceneSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccSceneSave not implemented")
}
func (UnimplementedAccSimServiceServer) AccSceneDelete(context.Context, *AccSceneDeleteRequest) (*AccSceneDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccSceneDelete not implemented")
}
func (UnimplementedAccSimServiceServer) AccSceneInfo(context.Context, *AccSceneInfoRequest) (*AccSceneInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccSceneInfo not implemented")
}
func (UnimplementedAccSimServiceServer) PoolFireCalc(context.Context, *PoolFireCalcRequest) (*PoolFireCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolFireCalc not implemented")
}
func (UnimplementedAccSimServiceServer) FlowingFireCalc(context.Context, *FlowingFireCalcRequest) (*FlowingFireCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowingFireCalc not implemented")
}
func (UnimplementedAccSimServiceServer) SealRingCalc(context.Context, *SealRingCalcRequest) (*SealRingCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealRingCalc not implemented")
}
func (UnimplementedAccSimServiceServer) JetFireCalc(context.Context, *JetFireCalcRequest) (*JetFireCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JetFireCalc not implemented")
}
func (UnimplementedAccSimServiceServer) BallFireCalc(context.Context, *BallFireCalcRequest) (*BallFireCalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallFireCalc not implemented")
}
func (UnimplementedAccSimServiceServer) FireExtinguishingDemand(context.Context, *FireExtinguishingDemandRequest) (*FireExtinguishingDemandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireExtinguishingDemand not implemented")
}
func (UnimplementedAccSimServiceServer) FireExtinguishingSave(context.Context, *FireExtinguishingSaveRequest) (*FireExtinguishingSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireExtinguishingSave not implemented")
}
func (UnimplementedAccSimServiceServer) CoolingWaterDemand(context.Context, *CoolingWaterDemandRequest) (*CoolingWaterDemandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoolingWaterDemand not implemented")
}
func (UnimplementedAccSimServiceServer) CoolingWaterSave(context.Context, *CoolingWaterSaveRequest) (*CoolingWaterSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoolingWaterSave not implemented")
}
func (UnimplementedAccSimServiceServer) EquipmentPersonDemand(context.Context, *EquipmentPersonDemandRequest) (*EquipmentPersonDemandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipmentPersonDemand not implemented")
}
func (UnimplementedAccSimServiceServer) EquipmentRequire(context.Context, *EquipmentRequireRequest) (*EquipmentRequireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipmentRequire not implemented")
}
func (UnimplementedAccSimServiceServer) MaterialBurningHeatGet(context.Context, *MaterialBurningHeatGetRequest) (*MaterialBurningHeatGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialBurningHeatGet not implemented")
}
func (UnimplementedAccSimServiceServer) EnterpriseAreaGet(context.Context, *EnterpriseAreaGetRequest) (*EnterpriseAreaGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseAreaGet not implemented")
}
func (UnimplementedAccSimServiceServer) EnterprisesGet(context.Context, *EnterprisesGetRequest) (*EnterprisesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterprisesGet not implemented")
}
func (UnimplementedAccSimServiceServer) EnterpriseGet(context.Context, *EnterpriseGetRequest) (*EnterpriseGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseGet not implemented")
}
func (UnimplementedAccSimServiceServer) mustEmbedUnimplementedAccSimServiceServer() {}

// UnsafeAccSimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccSimServiceServer will
// result in compilation errors.
type UnsafeAccSimServiceServer interface {
	mustEmbedUnimplementedAccSimServiceServer()
}

func RegisterAccSimServiceServer(s grpc.ServiceRegistrar, srv AccSimServiceServer) {
	s.RegisterService(&AccSimService_ServiceDesc, srv)
}

func _AccSimService_AccSceneGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccSceneGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).AccSceneGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_AccSceneGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).AccSceneGet(ctx, req.(*AccSceneGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_AccSceneSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccSceneSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).AccSceneSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_AccSceneSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).AccSceneSave(ctx, req.(*AccSceneSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_AccSceneDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccSceneDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).AccSceneDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_AccSceneDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).AccSceneDelete(ctx, req.(*AccSceneDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_AccSceneInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccSceneInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).AccSceneInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_AccSceneInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).AccSceneInfo(ctx, req.(*AccSceneInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_PoolFireCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolFireCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).PoolFireCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_PoolFireCalc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).PoolFireCalc(ctx, req.(*PoolFireCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_FlowingFireCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowingFireCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).FlowingFireCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_FlowingFireCalc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).FlowingFireCalc(ctx, req.(*FlowingFireCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_SealRingCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealRingCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).SealRingCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_SealRingCalc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).SealRingCalc(ctx, req.(*SealRingCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_JetFireCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JetFireCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).JetFireCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_JetFireCalc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).JetFireCalc(ctx, req.(*JetFireCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_BallFireCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallFireCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).BallFireCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_BallFireCalc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).BallFireCalc(ctx, req.(*BallFireCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_FireExtinguishingDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireExtinguishingDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).FireExtinguishingDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_FireExtinguishingDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).FireExtinguishingDemand(ctx, req.(*FireExtinguishingDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_FireExtinguishingSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireExtinguishingSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).FireExtinguishingSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_FireExtinguishingSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).FireExtinguishingSave(ctx, req.(*FireExtinguishingSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_CoolingWaterDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoolingWaterDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).CoolingWaterDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_CoolingWaterDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).CoolingWaterDemand(ctx, req.(*CoolingWaterDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_CoolingWaterSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoolingWaterSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).CoolingWaterSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_CoolingWaterSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).CoolingWaterSave(ctx, req.(*CoolingWaterSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_EquipmentPersonDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentPersonDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).EquipmentPersonDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_EquipmentPersonDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).EquipmentPersonDemand(ctx, req.(*EquipmentPersonDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_EquipmentRequire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentRequireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).EquipmentRequire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_EquipmentRequire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).EquipmentRequire(ctx, req.(*EquipmentRequireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_MaterialBurningHeatGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialBurningHeatGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).MaterialBurningHeatGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_MaterialBurningHeatGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).MaterialBurningHeatGet(ctx, req.(*MaterialBurningHeatGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_EnterpriseAreaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseAreaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).EnterpriseAreaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_EnterpriseAreaGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).EnterpriseAreaGet(ctx, req.(*EnterpriseAreaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_EnterprisesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterprisesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).EnterprisesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_EnterprisesGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).EnterprisesGet(ctx, req.(*EnterprisesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccSimService_EnterpriseGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccSimServiceServer).EnterpriseGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccSimService_EnterpriseGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccSimServiceServer).EnterpriseGet(ctx, req.(*EnterpriseGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccSimService_ServiceDesc is the grpc.ServiceDesc for AccSimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccSimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accsim.AccSimService",
	HandlerType: (*AccSimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccSceneGet",
			Handler:    _AccSimService_AccSceneGet_Handler,
		},
		{
			MethodName: "AccSceneSave",
			Handler:    _AccSimService_AccSceneSave_Handler,
		},
		{
			MethodName: "AccSceneDelete",
			Handler:    _AccSimService_AccSceneDelete_Handler,
		},
		{
			MethodName: "AccSceneInfo",
			Handler:    _AccSimService_AccSceneInfo_Handler,
		},
		{
			MethodName: "PoolFireCalc",
			Handler:    _AccSimService_PoolFireCalc_Handler,
		},
		{
			MethodName: "FlowingFireCalc",
			Handler:    _AccSimService_FlowingFireCalc_Handler,
		},
		{
			MethodName: "SealRingCalc",
			Handler:    _AccSimService_SealRingCalc_Handler,
		},
		{
			MethodName: "JetFireCalc",
			Handler:    _AccSimService_JetFireCalc_Handler,
		},
		{
			MethodName: "BallFireCalc",
			Handler:    _AccSimService_BallFireCalc_Handler,
		},
		{
			MethodName: "FireExtinguishingDemand",
			Handler:    _AccSimService_FireExtinguishingDemand_Handler,
		},
		{
			MethodName: "FireExtinguishingSave",
			Handler:    _AccSimService_FireExtinguishingSave_Handler,
		},
		{
			MethodName: "CoolingWaterDemand",
			Handler:    _AccSimService_CoolingWaterDemand_Handler,
		},
		{
			MethodName: "CoolingWaterSave",
			Handler:    _AccSimService_CoolingWaterSave_Handler,
		},
		{
			MethodName: "EquipmentPersonDemand",
			Handler:    _AccSimService_EquipmentPersonDemand_Handler,
		},
		{
			MethodName: "EquipmentRequire",
			Handler:    _AccSimService_EquipmentRequire_Handler,
		},
		{
			MethodName: "MaterialBurningHeatGet",
			Handler:    _AccSimService_MaterialBurningHeatGet_Handler,
		},
		{
			MethodName: "EnterpriseAreaGet",
			Handler:    _AccSimService_EnterpriseAreaGet_Handler,
		},
		{
			MethodName: "EnterprisesGet",
			Handler:    _AccSimService_EnterprisesGet_Handler,
		},
		{
			MethodName: "EnterpriseGet",
			Handler:    _AccSimService_EnterpriseGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accsim.proto",
}
