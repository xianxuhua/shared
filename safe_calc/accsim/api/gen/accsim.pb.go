// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: accsim.proto

package accsimpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccSceneGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccSceneGetRequest) Reset() {
	*x = AccSceneGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneGetRequest) ProtoMessage() {}

func (x *AccSceneGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneGetRequest.ProtoReflect.Descriptor instead.
func (*AccSceneGetRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{0}
}

type AccScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DeathRadius        float32   `protobuf:"fixed32,3,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius    float32   `protobuf:"fixed32,4,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	SmallInjuryRadius  float32   `protobuf:"fixed32,5,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	Longitude          float64   `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude           float64   `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	WindDirection      string    `protobuf:"bytes,8,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	WindSpeed          float32   `protobuf:"fixed32,9,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	TargetDis          float32   `protobuf:"fixed32,10,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	LiquidTankDiameter float32   `protobuf:"fixed32,11,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	Xs                 []float32 `protobuf:"fixed32,12,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                 []float32 `protobuf:"fixed32,13,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	SafeRadius         float32   `protobuf:"fixed32,14,opt,name=safe_radius,json=safeRadius,proto3" json:"safe_radius,omitempty"`
	Type               string    `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	AddTime            string    `protobuf:"bytes,16,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (x *AccScene) Reset() {
	*x = AccScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccScene) ProtoMessage() {}

func (x *AccScene) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccScene.ProtoReflect.Descriptor instead.
func (*AccScene) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{1}
}

func (x *AccScene) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccScene) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccScene) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *AccScene) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *AccScene) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *AccScene) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *AccScene) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AccScene) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *AccScene) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *AccScene) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *AccScene) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *AccScene) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *AccScene) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *AccScene) GetSafeRadius() float32 {
	if x != nil {
		return x.SafeRadius
	}
	return 0
}

func (x *AccScene) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccScene) GetAddTime() string {
	if x != nil {
		return x.AddTime
	}
	return ""
}

type AccSceneGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccScenes []*AccScene `protobuf:"bytes,1,rep,name=acc_scenes,json=accScenes,proto3" json:"acc_scenes,omitempty"`
}

func (x *AccSceneGetResponse) Reset() {
	*x = AccSceneGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneGetResponse) ProtoMessage() {}

func (x *AccSceneGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneGetResponse.ProtoReflect.Descriptor instead.
func (*AccSceneGetResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{2}
}

func (x *AccSceneGetResponse) GetAccScenes() []*AccScene {
	if x != nil {
		return x.AccScenes
	}
	return nil
}

type AccSceneSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               string    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	DeathRadius        float32   `protobuf:"fixed32,3,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius    float32   `protobuf:"fixed32,4,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	SmallInjuryRadius  float32   `protobuf:"fixed32,5,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	Longitude          float64   `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude           float64   `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	WindDirection      string    `protobuf:"bytes,8,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	WindSpeed          float32   `protobuf:"fixed32,9,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	TargetDis          float32   `protobuf:"fixed32,10,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	LiquidTankDiameter float32   `protobuf:"fixed32,11,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	Xs                 []float32 `protobuf:"fixed32,12,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                 []float32 `protobuf:"fixed32,13,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	SafeRadius         float32   `protobuf:"fixed32,14,opt,name=safe_radius,json=safeRadius,proto3" json:"safe_radius,omitempty"`
}

func (x *AccSceneSaveRequest) Reset() {
	*x = AccSceneSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneSaveRequest) ProtoMessage() {}

func (x *AccSceneSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneSaveRequest.ProtoReflect.Descriptor instead.
func (*AccSceneSaveRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{3}
}

func (x *AccSceneSaveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccSceneSaveRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccSceneSaveRequest) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *AccSceneSaveRequest) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *AccSceneSaveRequest) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *AccSceneSaveRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *AccSceneSaveRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AccSceneSaveRequest) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *AccSceneSaveRequest) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *AccSceneSaveRequest) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *AccSceneSaveRequest) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *AccSceneSaveRequest) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *AccSceneSaveRequest) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *AccSceneSaveRequest) GetSafeRadius() float32 {
	if x != nil {
		return x.SafeRadius
	}
	return 0
}

type AccSceneSaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccSceneSaveResponse) Reset() {
	*x = AccSceneSaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneSaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneSaveResponse) ProtoMessage() {}

func (x *AccSceneSaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneSaveResponse.ProtoReflect.Descriptor instead.
func (*AccSceneSaveResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{4}
}

type AccSceneDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccSceneDeleteRequest) Reset() {
	*x = AccSceneDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneDeleteRequest) ProtoMessage() {}

func (x *AccSceneDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneDeleteRequest.ProtoReflect.Descriptor instead.
func (*AccSceneDeleteRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{5}
}

func (x *AccSceneDeleteRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AccSceneDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccSceneDeleteResponse) Reset() {
	*x = AccSceneDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneDeleteResponse) ProtoMessage() {}

func (x *AccSceneDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneDeleteResponse.ProtoReflect.Descriptor instead.
func (*AccSceneDeleteResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{6}
}

type AccSceneInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AccSceneInfoRequest) Reset() {
	*x = AccSceneInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneInfoRequest) ProtoMessage() {}

func (x *AccSceneInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneInfoRequest.ProtoReflect.Descriptor instead.
func (*AccSceneInfoRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{7}
}

func (x *AccSceneInfoRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AccSceneInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               string    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	DeathRadius        float32   `protobuf:"fixed32,3,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius    float32   `protobuf:"fixed32,4,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	SmallInjuryRadius  float32   `protobuf:"fixed32,5,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	Longitude          float64   `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude           float64   `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	WindDirection      string    `protobuf:"bytes,8,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	WindSpeed          float32   `protobuf:"fixed32,9,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	TargetDis          float32   `protobuf:"fixed32,10,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	LiquidTankDiameter float32   `protobuf:"fixed32,11,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	Xs                 []float32 `protobuf:"fixed32,12,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                 []float32 `protobuf:"fixed32,13,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	SafeRadius         float32   `protobuf:"fixed32,14,opt,name=safe_radius,json=safeRadius,proto3" json:"safe_radius,omitempty"`
}

func (x *AccSceneInfoResponse) Reset() {
	*x = AccSceneInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccSceneInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccSceneInfoResponse) ProtoMessage() {}

func (x *AccSceneInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccSceneInfoResponse.ProtoReflect.Descriptor instead.
func (*AccSceneInfoResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{8}
}

func (x *AccSceneInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccSceneInfoResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccSceneInfoResponse) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *AccSceneInfoResponse) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *AccSceneInfoResponse) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *AccSceneInfoResponse) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *AccSceneInfoResponse) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AccSceneInfoResponse) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *AccSceneInfoResponse) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *AccSceneInfoResponse) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *AccSceneInfoResponse) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *AccSceneInfoResponse) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *AccSceneInfoResponse) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *AccSceneInfoResponse) GetSafeRadius() float32 {
	if x != nil {
		return x.SafeRadius
	}
	return 0
}

type PoolFireCalcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneName          string  `protobuf:"bytes,2,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	WindDirection      string  `protobuf:"bytes,4,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	WindSpeed          float32 `protobuf:"fixed32,5,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	LiquidTankDiameter float32 `protobuf:"fixed32,6,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	TargetDis          float32 `protobuf:"fixed32,8,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	Density            float32 `protobuf:"fixed32,9,opt,name=density,proto3" json:"density,omitempty"`
	BurningRate        float32 `protobuf:"fixed32,10,opt,name=burning_rate,json=burningRate,proto3" json:"burning_rate,omitempty"`
	BurningHeat        float32 `protobuf:"fixed32,11,opt,name=burning_heat,json=burningHeat,proto3" json:"burning_heat,omitempty"`
}

func (x *PoolFireCalcRequest) Reset() {
	*x = PoolFireCalcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolFireCalcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolFireCalcRequest) ProtoMessage() {}

func (x *PoolFireCalcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolFireCalcRequest.ProtoReflect.Descriptor instead.
func (*PoolFireCalcRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{9}
}

func (x *PoolFireCalcRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *PoolFireCalcRequest) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *PoolFireCalcRequest) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *PoolFireCalcRequest) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *PoolFireCalcRequest) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *PoolFireCalcRequest) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *PoolFireCalcRequest) GetBurningRate() float32 {
	if x != nil {
		return x.BurningRate
	}
	return 0
}

func (x *PoolFireCalcRequest) GetBurningHeat() float32 {
	if x != nil {
		return x.BurningHeat
	}
	return 0
}

type PoolFireCalcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireHeight            float32   `protobuf:"fixed32,1,opt,name=fire_height,json=fireHeight,proto3" json:"fire_height,omitempty"`
	TiltAngle             float32   `protobuf:"fixed32,2,opt,name=tilt_angle,json=tiltAngle,proto3" json:"tilt_angle,omitempty"`
	ExtendedFlameDiameter string    `protobuf:"bytes,3,opt,name=extended_flame_diameter,json=extendedFlameDiameter,proto3" json:"extended_flame_diameter,omitempty"`
	ThermalRadiationPower float32   `protobuf:"fixed32,4,opt,name=thermal_radiation_power,json=thermalRadiationPower,proto3" json:"thermal_radiation_power,omitempty"`
	DeathRadius           float32   `protobuf:"fixed32,5,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius       float32   `protobuf:"fixed32,6,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	SmallInjuryRadius     float32   `protobuf:"fixed32,7,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	Xs                    []float32 `protobuf:"fixed32,8,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                    []float32 `protobuf:"fixed32,9,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	SafeRadius            float32   `protobuf:"fixed32,10,opt,name=safe_radius,json=safeRadius,proto3" json:"safe_radius,omitempty"`
}

func (x *PoolFireCalcResponse) Reset() {
	*x = PoolFireCalcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolFireCalcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolFireCalcResponse) ProtoMessage() {}

func (x *PoolFireCalcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolFireCalcResponse.ProtoReflect.Descriptor instead.
func (*PoolFireCalcResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{10}
}

func (x *PoolFireCalcResponse) GetFireHeight() float32 {
	if x != nil {
		return x.FireHeight
	}
	return 0
}

func (x *PoolFireCalcResponse) GetTiltAngle() float32 {
	if x != nil {
		return x.TiltAngle
	}
	return 0
}

func (x *PoolFireCalcResponse) GetExtendedFlameDiameter() string {
	if x != nil {
		return x.ExtendedFlameDiameter
	}
	return ""
}

func (x *PoolFireCalcResponse) GetThermalRadiationPower() float32 {
	if x != nil {
		return x.ThermalRadiationPower
	}
	return 0
}

func (x *PoolFireCalcResponse) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *PoolFireCalcResponse) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *PoolFireCalcResponse) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *PoolFireCalcResponse) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *PoolFireCalcResponse) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *PoolFireCalcResponse) GetSafeRadius() float32 {
	if x != nil {
		return x.SafeRadius
	}
	return 0
}

type FlowingFireCalcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireTank           string  `protobuf:"bytes,1,opt,name=fire_tank,json=fireTank,proto3" json:"fire_tank,omitempty"`
	SceneName          string  `protobuf:"bytes,2,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	MaterialType       string  `protobuf:"bytes,3,opt,name=material_type,json=materialType,proto3" json:"material_type,omitempty"`
	WindDirection      string  `protobuf:"bytes,4,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	WindSpeed          float32 `protobuf:"fixed32,5,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	LiquidTankDiameter float32 `protobuf:"fixed32,6,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	SceneId            string  `protobuf:"bytes,7,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	TargetDis          float32 `protobuf:"fixed32,8,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	Density            float32 `protobuf:"fixed32,9,opt,name=density,proto3" json:"density,omitempty"`
	BurningRate        float32 `protobuf:"fixed32,10,opt,name=burning_rate,json=burningRate,proto3" json:"burning_rate,omitempty"`
	BurningHeat        float32 `protobuf:"fixed32,11,opt,name=burning_heat,json=burningHeat,proto3" json:"burning_heat,omitempty"`
}

func (x *FlowingFireCalcRequest) Reset() {
	*x = FlowingFireCalcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowingFireCalcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowingFireCalcRequest) ProtoMessage() {}

func (x *FlowingFireCalcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowingFireCalcRequest.ProtoReflect.Descriptor instead.
func (*FlowingFireCalcRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{11}
}

func (x *FlowingFireCalcRequest) GetFireTank() string {
	if x != nil {
		return x.FireTank
	}
	return ""
}

func (x *FlowingFireCalcRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *FlowingFireCalcRequest) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *FlowingFireCalcRequest) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *FlowingFireCalcRequest) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *FlowingFireCalcRequest) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *FlowingFireCalcRequest) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

func (x *FlowingFireCalcRequest) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *FlowingFireCalcRequest) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *FlowingFireCalcRequest) GetBurningRate() float32 {
	if x != nil {
		return x.BurningRate
	}
	return 0
}

func (x *FlowingFireCalcRequest) GetBurningHeat() float32 {
	if x != nil {
		return x.BurningHeat
	}
	return 0
}

type FlowingFireCalcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireHeight            float32   `protobuf:"fixed32,1,opt,name=fire_height,json=fireHeight,proto3" json:"fire_height,omitempty"`
	TiltAngle             float32   `protobuf:"fixed32,2,opt,name=tilt_angle,json=tiltAngle,proto3" json:"tilt_angle,omitempty"`
	ExtendedFlameDiameter string    `protobuf:"bytes,3,opt,name=extended_flame_diameter,json=extendedFlameDiameter,proto3" json:"extended_flame_diameter,omitempty"`
	ThermalRadiationPower float32   `protobuf:"fixed32,4,opt,name=thermal_radiation_power,json=thermalRadiationPower,proto3" json:"thermal_radiation_power,omitempty"`
	DeathRadius           float32   `protobuf:"fixed32,5,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius       float32   `protobuf:"fixed32,6,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	SmallInjuryRadius     float32   `protobuf:"fixed32,7,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	Xs                    []float32 `protobuf:"fixed32,8,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                    []float32 `protobuf:"fixed32,9,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	SafeRadius            float32   `protobuf:"fixed32,10,opt,name=safe_radius,json=safeRadius,proto3" json:"safe_radius,omitempty"`
}

func (x *FlowingFireCalcResponse) Reset() {
	*x = FlowingFireCalcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowingFireCalcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowingFireCalcResponse) ProtoMessage() {}

func (x *FlowingFireCalcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowingFireCalcResponse.ProtoReflect.Descriptor instead.
func (*FlowingFireCalcResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{12}
}

func (x *FlowingFireCalcResponse) GetFireHeight() float32 {
	if x != nil {
		return x.FireHeight
	}
	return 0
}

func (x *FlowingFireCalcResponse) GetTiltAngle() float32 {
	if x != nil {
		return x.TiltAngle
	}
	return 0
}

func (x *FlowingFireCalcResponse) GetExtendedFlameDiameter() string {
	if x != nil {
		return x.ExtendedFlameDiameter
	}
	return ""
}

func (x *FlowingFireCalcResponse) GetThermalRadiationPower() float32 {
	if x != nil {
		return x.ThermalRadiationPower
	}
	return 0
}

func (x *FlowingFireCalcResponse) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *FlowingFireCalcResponse) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *FlowingFireCalcResponse) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *FlowingFireCalcResponse) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *FlowingFireCalcResponse) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *FlowingFireCalcResponse) GetSafeRadius() float32 {
	if x != nil {
		return x.SafeRadius
	}
	return 0
}

type SealRingCalcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireTank           string  `protobuf:"bytes,1,opt,name=fire_tank,json=fireTank,proto3" json:"fire_tank,omitempty"`
	SceneName          string  `protobuf:"bytes,2,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	MaterialType       string  `protobuf:"bytes,3,opt,name=material_type,json=materialType,proto3" json:"material_type,omitempty"`
	WindDirection      string  `protobuf:"bytes,4,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
	WindSpeed          float32 `protobuf:"fixed32,5,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	LiquidTankDiameter float32 `protobuf:"fixed32,6,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	SceneId            string  `protobuf:"bytes,7,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	TargetDis          float32 `protobuf:"fixed32,8,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	Density            float32 `protobuf:"fixed32,9,opt,name=density,proto3" json:"density,omitempty"`
	BurningRate        float32 `protobuf:"fixed32,10,opt,name=burning_rate,json=burningRate,proto3" json:"burning_rate,omitempty"`
	BurningHeat        float32 `protobuf:"fixed32,11,opt,name=burning_heat,json=burningHeat,proto3" json:"burning_heat,omitempty"`
	RingWidth          float32 `protobuf:"fixed32,12,opt,name=ring_width,json=ringWidth,proto3" json:"ring_width,omitempty"`
}

func (x *SealRingCalcRequest) Reset() {
	*x = SealRingCalcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealRingCalcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealRingCalcRequest) ProtoMessage() {}

func (x *SealRingCalcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealRingCalcRequest.ProtoReflect.Descriptor instead.
func (*SealRingCalcRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{13}
}

func (x *SealRingCalcRequest) GetFireTank() string {
	if x != nil {
		return x.FireTank
	}
	return ""
}

func (x *SealRingCalcRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *SealRingCalcRequest) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *SealRingCalcRequest) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

func (x *SealRingCalcRequest) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *SealRingCalcRequest) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *SealRingCalcRequest) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

func (x *SealRingCalcRequest) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *SealRingCalcRequest) GetDensity() float32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *SealRingCalcRequest) GetBurningRate() float32 {
	if x != nil {
		return x.BurningRate
	}
	return 0
}

func (x *SealRingCalcRequest) GetBurningHeat() float32 {
	if x != nil {
		return x.BurningHeat
	}
	return 0
}

func (x *SealRingCalcRequest) GetRingWidth() float32 {
	if x != nil {
		return x.RingWidth
	}
	return 0
}

type SealRingCalcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermalRadiationPower float32 `protobuf:"fixed32,1,opt,name=thermal_radiation_power,json=thermalRadiationPower,proto3" json:"thermal_radiation_power,omitempty"`
	DeathRadius           float32 `protobuf:"fixed32,2,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius       float32 `protobuf:"fixed32,3,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	SmallInjuryRadius     float32 `protobuf:"fixed32,4,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	SafeRadius            float32 `protobuf:"fixed32,5,opt,name=safe_radius,json=safeRadius,proto3" json:"safe_radius,omitempty"`
}

func (x *SealRingCalcResponse) Reset() {
	*x = SealRingCalcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealRingCalcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealRingCalcResponse) ProtoMessage() {}

func (x *SealRingCalcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealRingCalcResponse.ProtoReflect.Descriptor instead.
func (*SealRingCalcResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{14}
}

func (x *SealRingCalcResponse) GetThermalRadiationPower() float32 {
	if x != nil {
		return x.ThermalRadiationPower
	}
	return 0
}

func (x *SealRingCalcResponse) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *SealRingCalcResponse) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *SealRingCalcResponse) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *SealRingCalcResponse) GetSafeRadius() float32 {
	if x != nil {
		return x.SafeRadius
	}
	return 0
}

type JetFireCalcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 孔径
	Aperture float32 `protobuf:"fixed32,1,opt,name=aperture,proto3" json:"aperture,omitempty"`
	// 压力
	Pressure float32 `protobuf:"fixed32,2,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// 比热容
	SpecificHeatCapacity float32 `protobuf:"fixed32,3,opt,name=specific_heat_capacity,json=specificHeatCapacity,proto3" json:"specific_heat_capacity,omitempty"`
	// 分子量
	MolecularWeight float32 `protobuf:"fixed32,4,opt,name=molecular_weight,json=molecularWeight,proto3" json:"molecular_weight,omitempty"`
	// 燃烧热
	BurningHeat float32 `protobuf:"fixed32,5,opt,name=burning_heat,json=burningHeat,proto3" json:"burning_heat,omitempty"`
	TargetDis   float32 `protobuf:"fixed32,6,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	// 管道压力
	PipelinePressure float32 `protobuf:"fixed32,7,opt,name=pipeline_pressure,json=pipelinePressure,proto3" json:"pipeline_pressure,omitempty"`
	WindSpeed        float32 `protobuf:"fixed32,8,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	SceneName        string  `protobuf:"bytes,9,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	WindDirection    string  `protobuf:"bytes,10,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
}

func (x *JetFireCalcRequest) Reset() {
	*x = JetFireCalcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JetFireCalcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JetFireCalcRequest) ProtoMessage() {}

func (x *JetFireCalcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JetFireCalcRequest.ProtoReflect.Descriptor instead.
func (*JetFireCalcRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{15}
}

func (x *JetFireCalcRequest) GetAperture() float32 {
	if x != nil {
		return x.Aperture
	}
	return 0
}

func (x *JetFireCalcRequest) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *JetFireCalcRequest) GetSpecificHeatCapacity() float32 {
	if x != nil {
		return x.SpecificHeatCapacity
	}
	return 0
}

func (x *JetFireCalcRequest) GetMolecularWeight() float32 {
	if x != nil {
		return x.MolecularWeight
	}
	return 0
}

func (x *JetFireCalcRequest) GetBurningHeat() float32 {
	if x != nil {
		return x.BurningHeat
	}
	return 0
}

func (x *JetFireCalcRequest) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *JetFireCalcRequest) GetPipelinePressure() float32 {
	if x != nil {
		return x.PipelinePressure
	}
	return 0
}

func (x *JetFireCalcRequest) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *JetFireCalcRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *JetFireCalcRequest) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

type JetFireCalcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmallInjuryRadius float32   `protobuf:"fixed32,1,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	DeathRadius       float32   `protobuf:"fixed32,2,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius   float32   `protobuf:"fixed32,3,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	Xs                []float32 `protobuf:"fixed32,4,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                []float32 `protobuf:"fixed32,5,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	// 热辐射通量
	HeatRadiationFlux float32 `protobuf:"fixed32,6,opt,name=heat_radiation_flux,json=heatRadiationFlux,proto3" json:"heat_radiation_flux,omitempty"`
	FireHeight        float32 `protobuf:"fixed32,7,opt,name=fire_height,json=fireHeight,proto3" json:"fire_height,omitempty"`
	FireDiameter      float32 `protobuf:"fixed32,8,opt,name=fire_diameter,json=fireDiameter,proto3" json:"fire_diameter,omitempty"`
}

func (x *JetFireCalcResponse) Reset() {
	*x = JetFireCalcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JetFireCalcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JetFireCalcResponse) ProtoMessage() {}

func (x *JetFireCalcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JetFireCalcResponse.ProtoReflect.Descriptor instead.
func (*JetFireCalcResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{16}
}

func (x *JetFireCalcResponse) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *JetFireCalcResponse) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *JetFireCalcResponse) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *JetFireCalcResponse) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *JetFireCalcResponse) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *JetFireCalcResponse) GetHeatRadiationFlux() float32 {
	if x != nil {
		return x.HeatRadiationFlux
	}
	return 0
}

func (x *JetFireCalcResponse) GetFireHeight() float32 {
	if x != nil {
		return x.FireHeight
	}
	return 0
}

func (x *JetFireCalcResponse) GetFireDiameter() float32 {
	if x != nil {
		return x.FireDiameter
	}
	return 0
}

type BallFireCalcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泄漏量
	Leakage float32 `protobuf:"fixed32,1,opt,name=leakage,proto3" json:"leakage,omitempty"`
	// 燃烧热
	BurningHeat   float32 `protobuf:"fixed32,2,opt,name=burning_heat,json=burningHeat,proto3" json:"burning_heat,omitempty"`
	TargetDis     float32 `protobuf:"fixed32,3,opt,name=target_dis,json=targetDis,proto3" json:"target_dis,omitempty"`
	WindSpeed     float32 `protobuf:"fixed32,4,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	SceneName     string  `protobuf:"bytes,5,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	WindDirection string  `protobuf:"bytes,6,opt,name=wind_direction,json=windDirection,proto3" json:"wind_direction,omitempty"`
}

func (x *BallFireCalcRequest) Reset() {
	*x = BallFireCalcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallFireCalcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallFireCalcRequest) ProtoMessage() {}

func (x *BallFireCalcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallFireCalcRequest.ProtoReflect.Descriptor instead.
func (*BallFireCalcRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{17}
}

func (x *BallFireCalcRequest) GetLeakage() float32 {
	if x != nil {
		return x.Leakage
	}
	return 0
}

func (x *BallFireCalcRequest) GetBurningHeat() float32 {
	if x != nil {
		return x.BurningHeat
	}
	return 0
}

func (x *BallFireCalcRequest) GetTargetDis() float32 {
	if x != nil {
		return x.TargetDis
	}
	return 0
}

func (x *BallFireCalcRequest) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *BallFireCalcRequest) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *BallFireCalcRequest) GetWindDirection() string {
	if x != nil {
		return x.WindDirection
	}
	return ""
}

type BallFireCalcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmallInjuryRadius float32   `protobuf:"fixed32,1,opt,name=small_injury_radius,json=smallInjuryRadius,proto3" json:"small_injury_radius,omitempty"`
	DeathRadius       float32   `protobuf:"fixed32,2,opt,name=death_radius,json=deathRadius,proto3" json:"death_radius,omitempty"`
	BigInjuryRadius   float32   `protobuf:"fixed32,3,opt,name=big_injury_radius,json=bigInjuryRadius,proto3" json:"big_injury_radius,omitempty"`
	Xs                []float32 `protobuf:"fixed32,4,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                []float32 `protobuf:"fixed32,5,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	// 火焰最大半径
	MaxRadius float32 `protobuf:"fixed32,6,opt,name=max_radius,json=maxRadius,proto3" json:"max_radius,omitempty"`
	// 火球燃烧的持续时间
	Duration float32 `protobuf:"fixed32,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// 热辐射通量
	HeatRadiationFlux float32 `protobuf:"fixed32,8,opt,name=heat_radiation_flux,json=heatRadiationFlux,proto3" json:"heat_radiation_flux,omitempty"`
}

func (x *BallFireCalcResponse) Reset() {
	*x = BallFireCalcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallFireCalcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallFireCalcResponse) ProtoMessage() {}

func (x *BallFireCalcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallFireCalcResponse.ProtoReflect.Descriptor instead.
func (*BallFireCalcResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{18}
}

func (x *BallFireCalcResponse) GetSmallInjuryRadius() float32 {
	if x != nil {
		return x.SmallInjuryRadius
	}
	return 0
}

func (x *BallFireCalcResponse) GetDeathRadius() float32 {
	if x != nil {
		return x.DeathRadius
	}
	return 0
}

func (x *BallFireCalcResponse) GetBigInjuryRadius() float32 {
	if x != nil {
		return x.BigInjuryRadius
	}
	return 0
}

func (x *BallFireCalcResponse) GetXs() []float32 {
	if x != nil {
		return x.Xs
	}
	return nil
}

func (x *BallFireCalcResponse) GetYs() []float32 {
	if x != nil {
		return x.Ys
	}
	return nil
}

func (x *BallFireCalcResponse) GetMaxRadius() float32 {
	if x != nil {
		return x.MaxRadius
	}
	return 0
}

func (x *BallFireCalcResponse) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BallFireCalcResponse) GetHeatRadiationFlux() float32 {
	if x != nil {
		return x.HeatRadiationFlux
	}
	return 0
}

type FireExtinguishingDemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 液池直径
	LiquidTankDiameter float32 `protobuf:"fixed32,1,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
	// 泡沫灭火供给强度
	SupplyStrength float32 `protobuf:"fixed32,2,opt,name=supply_strength,json=supplyStrength,proto3" json:"supply_strength,omitempty"`
	// 泡沫混合液连续供给时间
	SupplyTime float32 `protobuf:"fixed32,3,opt,name=supply_time,json=supplyTime,proto3" json:"supply_time,omitempty"`
	// 混合比
	MixRatio float32 `protobuf:"fixed32,4,opt,name=mix_ratio,json=mixRatio,proto3" json:"mix_ratio,omitempty"`
}

func (x *FireExtinguishingDemandRequest) Reset() {
	*x = FireExtinguishingDemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireExtinguishingDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireExtinguishingDemandRequest) ProtoMessage() {}

func (x *FireExtinguishingDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireExtinguishingDemandRequest.ProtoReflect.Descriptor instead.
func (*FireExtinguishingDemandRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{19}
}

func (x *FireExtinguishingDemandRequest) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

func (x *FireExtinguishingDemandRequest) GetSupplyStrength() float32 {
	if x != nil {
		return x.SupplyStrength
	}
	return 0
}

func (x *FireExtinguishingDemandRequest) GetSupplyTime() float32 {
	if x != nil {
		return x.SupplyTime
	}
	return 0
}

func (x *FireExtinguishingDemandRequest) GetMixRatio() float32 {
	if x != nil {
		return x.MixRatio
	}
	return 0
}

type FireExtinguishingDemandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泡沫灭火剂流量(理论)
	FireExtinguishingFlowTheory float32 `protobuf:"fixed32,1,opt,name=fire_extinguishing_flow_theory,json=fireExtinguishingFlowTheory,proto3" json:"fire_extinguishing_flow_theory,omitempty"`
	// 泡沫灭火剂流量(实际)
	FireExtinguishingFlowActual float32 `protobuf:"fixed32,2,opt,name=fire_extinguishing_flow_actual,json=fireExtinguishingFlowActual,proto3" json:"fire_extinguishing_flow_actual,omitempty"`
	// 泡沫原液理论流量
	PrimaryLiquidFlowTheory float32 `protobuf:"fixed32,3,opt,name=primary_liquid_flow_theory,json=primaryLiquidFlowTheory,proto3" json:"primary_liquid_flow_theory,omitempty"`
	// 泡沫原液实际流量
	PrimaryLiquidFlowActual float32 `protobuf:"fixed32,4,opt,name=primary_liquid_flow_actual,json=primaryLiquidFlowActual,proto3" json:"primary_liquid_flow_actual,omitempty"`
	// 泡沫原液理论用量
	PrimaryLiquidUsageTheory float32 `protobuf:"fixed32,5,opt,name=primary_liquid_usage_theory,json=primaryLiquidUsageTheory,proto3" json:"primary_liquid_usage_theory,omitempty"`
	// 泡沫原液实际用量
	PrimaryLiquidUsageActual float32 `protobuf:"fixed32,6,opt,name=primary_liquid_usage_actual,json=primaryLiquidUsageActual,proto3" json:"primary_liquid_usage_actual,omitempty"`
	// 泡沫灭火剂用量(理论)
	FireExtinguishingUsageTheory float32 `protobuf:"fixed32,7,opt,name=fire_extinguishing_usage_theory,json=fireExtinguishingUsageTheory,proto3" json:"fire_extinguishing_usage_theory,omitempty"`
	// 泡沫灭火剂用量(实际)
	FireExtinguishingUsageActual float32 `protobuf:"fixed32,8,opt,name=fire_extinguishing_usage_actual,json=fireExtinguishingUsageActual,proto3" json:"fire_extinguishing_usage_actual,omitempty"`
	// 配置泡沫灭火剂用水流量(理论)
	ConfigFireExtinguishingFlowTheory float32 `protobuf:"fixed32,9,opt,name=config_fire_extinguishing_flow_theory,json=configFireExtinguishingFlowTheory,proto3" json:"config_fire_extinguishing_flow_theory,omitempty"`
	// 配置泡沫灭火剂用水流量(实际)
	ConfigFireExtinguishingFlowActual float32 `protobuf:"fixed32,10,opt,name=config_fire_extinguishing_flow_actual,json=configFireExtinguishingFlowActual,proto3" json:"config_fire_extinguishing_flow_actual,omitempty"`
	// 配置泡沫灭火剂用水量(理论)
	ConfigFireExtinguishingUsageTheory float32 `protobuf:"fixed32,11,opt,name=config_fire_extinguishing_usage_theory,json=configFireExtinguishingUsageTheory,proto3" json:"config_fire_extinguishing_usage_theory,omitempty"`
	// 配置泡沫灭火剂用水量(实际)
	ConfigFireExtinguishingUsageActual float32 `protobuf:"fixed32,12,opt,name=config_fire_extinguishing_usage_actual,json=configFireExtinguishingUsageActual,proto3" json:"config_fire_extinguishing_usage_actual,omitempty"`
}

func (x *FireExtinguishingDemandResponse) Reset() {
	*x = FireExtinguishingDemandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireExtinguishingDemandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireExtinguishingDemandResponse) ProtoMessage() {}

func (x *FireExtinguishingDemandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireExtinguishingDemandResponse.ProtoReflect.Descriptor instead.
func (*FireExtinguishingDemandResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{20}
}

func (x *FireExtinguishingDemandResponse) GetFireExtinguishingFlowTheory() float32 {
	if x != nil {
		return x.FireExtinguishingFlowTheory
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetFireExtinguishingFlowActual() float32 {
	if x != nil {
		return x.FireExtinguishingFlowActual
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetPrimaryLiquidFlowTheory() float32 {
	if x != nil {
		return x.PrimaryLiquidFlowTheory
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetPrimaryLiquidFlowActual() float32 {
	if x != nil {
		return x.PrimaryLiquidFlowActual
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetPrimaryLiquidUsageTheory() float32 {
	if x != nil {
		return x.PrimaryLiquidUsageTheory
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetPrimaryLiquidUsageActual() float32 {
	if x != nil {
		return x.PrimaryLiquidUsageActual
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetFireExtinguishingUsageTheory() float32 {
	if x != nil {
		return x.FireExtinguishingUsageTheory
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetFireExtinguishingUsageActual() float32 {
	if x != nil {
		return x.FireExtinguishingUsageActual
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetConfigFireExtinguishingFlowTheory() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingFlowTheory
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetConfigFireExtinguishingFlowActual() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingFlowActual
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetConfigFireExtinguishingUsageTheory() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingUsageTheory
	}
	return 0
}

func (x *FireExtinguishingDemandResponse) GetConfigFireExtinguishingUsageActual() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingUsageActual
	}
	return 0
}

type FireExtinguishingSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泡沫灭火剂流量(理论)
	FireExtinguishingFlowTheory float32 `protobuf:"fixed32,1,opt,name=fire_extinguishing_flow_theory,json=fireExtinguishingFlowTheory,proto3" json:"fire_extinguishing_flow_theory,omitempty"`
	// 泡沫灭火剂流量(实际)
	FireExtinguishingFlowActual float32 `protobuf:"fixed32,2,opt,name=fire_extinguishing_flow_actual,json=fireExtinguishingFlowActual,proto3" json:"fire_extinguishing_flow_actual,omitempty"`
	// 泡沫原液理论流量
	PrimaryLiquidFlowTheory float32 `protobuf:"fixed32,3,opt,name=primary_liquid_flow_theory,json=primaryLiquidFlowTheory,proto3" json:"primary_liquid_flow_theory,omitempty"`
	// 泡沫原液实际流量
	PrimaryLiquidFlowActual float32 `protobuf:"fixed32,4,opt,name=primary_liquid_flow_actual,json=primaryLiquidFlowActual,proto3" json:"primary_liquid_flow_actual,omitempty"`
	// 泡沫原液理论用量
	PrimaryLiquidUsageTheory float32 `protobuf:"fixed32,5,opt,name=primary_liquid_usage_theory,json=primaryLiquidUsageTheory,proto3" json:"primary_liquid_usage_theory,omitempty"`
	// 泡沫原液实际用量
	PrimaryLiquidUsageActual float32 `protobuf:"fixed32,6,opt,name=primary_liquid_usage_actual,json=primaryLiquidUsageActual,proto3" json:"primary_liquid_usage_actual,omitempty"`
	// 泡沫灭火剂用量(理论)
	FireExtinguishingUsageTheory float32 `protobuf:"fixed32,7,opt,name=fire_extinguishing_usage_theory,json=fireExtinguishingUsageTheory,proto3" json:"fire_extinguishing_usage_theory,omitempty"`
	// 泡沫灭火剂用量(实际)
	FireExtinguishingUsageActual float32 `protobuf:"fixed32,8,opt,name=fire_extinguishing_usage_actual,json=fireExtinguishingUsageActual,proto3" json:"fire_extinguishing_usage_actual,omitempty"`
	// 配置泡沫灭火剂用水流量(理论)
	ConfigFireExtinguishingFlowTheory float32 `protobuf:"fixed32,9,opt,name=config_fire_extinguishing_flow_theory,json=configFireExtinguishingFlowTheory,proto3" json:"config_fire_extinguishing_flow_theory,omitempty"`
	// 配置泡沫灭火剂用水流量(实际)
	ConfigFireExtinguishingFlowActual float32 `protobuf:"fixed32,10,opt,name=config_fire_extinguishing_flow_actual,json=configFireExtinguishingFlowActual,proto3" json:"config_fire_extinguishing_flow_actual,omitempty"`
	// 配置泡沫灭火剂用水量(理论)
	ConfigFireExtinguishingUsageTheory float32 `protobuf:"fixed32,11,opt,name=config_fire_extinguishing_usage_theory,json=configFireExtinguishingUsageTheory,proto3" json:"config_fire_extinguishing_usage_theory,omitempty"`
	// 配置泡沫灭火剂用水量(实际)
	ConfigFireExtinguishingUsageActual float32 `protobuf:"fixed32,12,opt,name=config_fire_extinguishing_usage_actual,json=configFireExtinguishingUsageActual,proto3" json:"config_fire_extinguishing_usage_actual,omitempty"`
	SceneId                            int32   `protobuf:"varint,13,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	// 泡沫灭火供给强度
	SupplyStrength float32 `protobuf:"fixed32,14,opt,name=supply_strength,json=supplyStrength,proto3" json:"supply_strength,omitempty"`
	// 泡沫混合液连续供给时间
	SupplyTime float32 `protobuf:"fixed32,15,opt,name=supply_time,json=supplyTime,proto3" json:"supply_time,omitempty"`
	// 混合比
	MixRatio float32 `protobuf:"fixed32,16,opt,name=mix_ratio,json=mixRatio,proto3" json:"mix_ratio,omitempty"`
	// 液池直径
	LiquidTankDiameter float32 `protobuf:"fixed32,17,opt,name=liquid_tank_diameter,json=liquidTankDiameter,proto3" json:"liquid_tank_diameter,omitempty"`
}

func (x *FireExtinguishingSaveRequest) Reset() {
	*x = FireExtinguishingSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireExtinguishingSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireExtinguishingSaveRequest) ProtoMessage() {}

func (x *FireExtinguishingSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireExtinguishingSaveRequest.ProtoReflect.Descriptor instead.
func (*FireExtinguishingSaveRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{21}
}

func (x *FireExtinguishingSaveRequest) GetFireExtinguishingFlowTheory() float32 {
	if x != nil {
		return x.FireExtinguishingFlowTheory
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetFireExtinguishingFlowActual() float32 {
	if x != nil {
		return x.FireExtinguishingFlowActual
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetPrimaryLiquidFlowTheory() float32 {
	if x != nil {
		return x.PrimaryLiquidFlowTheory
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetPrimaryLiquidFlowActual() float32 {
	if x != nil {
		return x.PrimaryLiquidFlowActual
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetPrimaryLiquidUsageTheory() float32 {
	if x != nil {
		return x.PrimaryLiquidUsageTheory
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetPrimaryLiquidUsageActual() float32 {
	if x != nil {
		return x.PrimaryLiquidUsageActual
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetFireExtinguishingUsageTheory() float32 {
	if x != nil {
		return x.FireExtinguishingUsageTheory
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetFireExtinguishingUsageActual() float32 {
	if x != nil {
		return x.FireExtinguishingUsageActual
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetConfigFireExtinguishingFlowTheory() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingFlowTheory
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetConfigFireExtinguishingFlowActual() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingFlowActual
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetConfigFireExtinguishingUsageTheory() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingUsageTheory
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetConfigFireExtinguishingUsageActual() float32 {
	if x != nil {
		return x.ConfigFireExtinguishingUsageActual
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetSupplyStrength() float32 {
	if x != nil {
		return x.SupplyStrength
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetSupplyTime() float32 {
	if x != nil {
		return x.SupplyTime
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetMixRatio() float32 {
	if x != nil {
		return x.MixRatio
	}
	return 0
}

func (x *FireExtinguishingSaveRequest) GetLiquidTankDiameter() float32 {
	if x != nil {
		return x.LiquidTankDiameter
	}
	return 0
}

type FireExtinguishingSaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FireExtinguishingSaveResponse) Reset() {
	*x = FireExtinguishingSaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireExtinguishingSaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireExtinguishingSaveResponse) ProtoMessage() {}

func (x *FireExtinguishingSaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireExtinguishingSaveResponse.ProtoReflect.Descriptor instead.
func (*FireExtinguishingSaveResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{22}
}

type CoolingWaterDemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num                int32   `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	NearNum            int32   `protobuf:"varint,2,opt,name=near_num,json=nearNum,proto3" json:"near_num,omitempty"`
	Diameter           float32 `protobuf:"fixed32,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	NearDiameter       float32 `protobuf:"fixed32,4,opt,name=near_diameter,json=nearDiameter,proto3" json:"near_diameter,omitempty"`
	CoolingTime        int32   `protobuf:"varint,5,opt,name=cooling_time,json=coolingTime,proto3" json:"cooling_time,omitempty"`
	NearCoolingTime    int32   `protobuf:"varint,6,opt,name=near_cooling_time,json=nearCoolingTime,proto3" json:"near_cooling_time,omitempty"`
	SupplyStrength     float32 `protobuf:"fixed32,7,opt,name=supply_strength,json=supplyStrength,proto3" json:"supply_strength,omitempty"`
	NearSupplyStrength float32 `protobuf:"fixed32,8,opt,name=near_supply_strength,json=nearSupplyStrength,proto3" json:"near_supply_strength,omitempty"`
	SingleFlow         float32 `protobuf:"fixed32,9,opt,name=single_flow,json=singleFlow,proto3" json:"single_flow,omitempty"`
}

func (x *CoolingWaterDemandRequest) Reset() {
	*x = CoolingWaterDemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingWaterDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingWaterDemandRequest) ProtoMessage() {}

func (x *CoolingWaterDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingWaterDemandRequest.ProtoReflect.Descriptor instead.
func (*CoolingWaterDemandRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{23}
}

func (x *CoolingWaterDemandRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetNearNum() int32 {
	if x != nil {
		return x.NearNum
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetDiameter() float32 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetNearDiameter() float32 {
	if x != nil {
		return x.NearDiameter
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetCoolingTime() int32 {
	if x != nil {
		return x.CoolingTime
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetNearCoolingTime() int32 {
	if x != nil {
		return x.NearCoolingTime
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetSupplyStrength() float32 {
	if x != nil {
		return x.SupplyStrength
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetNearSupplyStrength() float32 {
	if x != nil {
		return x.NearSupplyStrength
	}
	return 0
}

func (x *CoolingWaterDemandRequest) GetSingleFlow() float32 {
	if x != nil {
		return x.SingleFlow
	}
	return 0
}

type CoolingWaterDemandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用于冷却液池/设备设施用水流量
	FlowTheory float32 `protobuf:"fixed32,1,opt,name=flow_theory,json=flowTheory,proto3" json:"flow_theory,omitempty"`
	// 用于冷却液池/设备设施用水流量(实际)
	FlowActual float32 `protobuf:"fixed32,2,opt,name=flow_actual,json=flowActual,proto3" json:"flow_actual,omitempty"`
	// 用于冷却临近罐用水流量
	NearFlowTheory float32 `protobuf:"fixed32,3,opt,name=near_flow_theory,json=nearFlowTheory,proto3" json:"near_flow_theory,omitempty"`
	// 用于冷却临近罐用水流量(实际)
	NearFlowActual float32 `protobuf:"fixed32,4,opt,name=near_flow_actual,json=nearFlowActual,proto3" json:"near_flow_actual,omitempty"`
	// 用于冷却液池/设备设施用水量
	UsageTheory float32 `protobuf:"fixed32,5,opt,name=usage_theory,json=usageTheory,proto3" json:"usage_theory,omitempty"`
	// 用于冷却液池/设备设施用水量(实际)
	UsageActual float32 `protobuf:"fixed32,6,opt,name=usage_actual,json=usageActual,proto3" json:"usage_actual,omitempty"`
	// 用于冷却临近罐用水量
	NearUsageTheory float32 `protobuf:"fixed32,7,opt,name=near_usage_theory,json=nearUsageTheory,proto3" json:"near_usage_theory,omitempty"`
	// 用于冷却临近罐用水量(实际)
	NearUsageActual float32 `protobuf:"fixed32,8,opt,name=near_usage_actual,json=nearUsageActual,proto3" json:"near_usage_actual,omitempty"`
	// 总用水量
	TotalUsageTheory float32 `protobuf:"fixed32,9,opt,name=total_usage_theory,json=totalUsageTheory,proto3" json:"total_usage_theory,omitempty"`
	// 总用水量(实际)
	TotalUsageActual float32 `protobuf:"fixed32,10,opt,name=total_usage_actual,json=totalUsageActual,proto3" json:"total_usage_actual,omitempty"`
}

func (x *CoolingWaterDemandResponse) Reset() {
	*x = CoolingWaterDemandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingWaterDemandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingWaterDemandResponse) ProtoMessage() {}

func (x *CoolingWaterDemandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingWaterDemandResponse.ProtoReflect.Descriptor instead.
func (*CoolingWaterDemandResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{24}
}

func (x *CoolingWaterDemandResponse) GetFlowTheory() float32 {
	if x != nil {
		return x.FlowTheory
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetFlowActual() float32 {
	if x != nil {
		return x.FlowActual
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetNearFlowTheory() float32 {
	if x != nil {
		return x.NearFlowTheory
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetNearFlowActual() float32 {
	if x != nil {
		return x.NearFlowActual
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetUsageTheory() float32 {
	if x != nil {
		return x.UsageTheory
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetUsageActual() float32 {
	if x != nil {
		return x.UsageActual
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetNearUsageTheory() float32 {
	if x != nil {
		return x.NearUsageTheory
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetNearUsageActual() float32 {
	if x != nil {
		return x.NearUsageActual
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetTotalUsageTheory() float32 {
	if x != nil {
		return x.TotalUsageTheory
	}
	return 0
}

func (x *CoolingWaterDemandResponse) GetTotalUsageActual() float32 {
	if x != nil {
		return x.TotalUsageActual
	}
	return 0
}

type CoolingWaterSaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用于冷却液池/设备设施用水流量
	FlowTheory float32 `protobuf:"fixed32,1,opt,name=flow_theory,json=flowTheory,proto3" json:"flow_theory,omitempty"`
	// 用于冷却液池/设备设施用水流量(实际)
	FlowActual float32 `protobuf:"fixed32,2,opt,name=flow_actual,json=flowActual,proto3" json:"flow_actual,omitempty"`
	// 用于冷却临近罐用水流量
	NearFlowTheory float32 `protobuf:"fixed32,3,opt,name=near_flow_theory,json=nearFlowTheory,proto3" json:"near_flow_theory,omitempty"`
	// 用于冷却临近罐用水流量(实际)
	NearFlowActual float32 `protobuf:"fixed32,4,opt,name=near_flow_actual,json=nearFlowActual,proto3" json:"near_flow_actual,omitempty"`
	// 用于冷却液池/设备设施用水量
	UsageTheory float32 `protobuf:"fixed32,5,opt,name=usage_theory,json=usageTheory,proto3" json:"usage_theory,omitempty"`
	// 用于冷却液池/设备设施用水量(实际)
	UsageActual float32 `protobuf:"fixed32,6,opt,name=usage_actual,json=usageActual,proto3" json:"usage_actual,omitempty"`
	// 用于冷却临近罐用水量
	NearUsageTheory float32 `protobuf:"fixed32,7,opt,name=near_usage_theory,json=nearUsageTheory,proto3" json:"near_usage_theory,omitempty"`
	// 用于冷却临近罐用水量(实际)
	NearUsageActual float32 `protobuf:"fixed32,8,opt,name=near_usage_actual,json=nearUsageActual,proto3" json:"near_usage_actual,omitempty"`
	// 总用水量
	TotalUsageTheory float32 `protobuf:"fixed32,9,opt,name=total_usage_theory,json=totalUsageTheory,proto3" json:"total_usage_theory,omitempty"`
	// 总用水量(实际)
	TotalUsageActual float32 `protobuf:"fixed32,10,opt,name=total_usage_actual,json=totalUsageActual,proto3" json:"total_usage_actual,omitempty"`
	SceneId          int32   `protobuf:"varint,11,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	// 着火液池数量
	Num int32 `protobuf:"varint,12,opt,name=num,proto3" json:"num,omitempty"`
	// 临近液池数量
	NearNum int32 `protobuf:"varint,13,opt,name=near_num,json=nearNum,proto3" json:"near_num,omitempty"`
	// 着火液池直径
	Diameter float32 `protobuf:"fixed32,14,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// 临近液池直径
	NearDiameter float32 `protobuf:"fixed32,15,opt,name=near_diameter,json=nearDiameter,proto3" json:"near_diameter,omitempty"`
	// 着火液池冷却时间
	CoolingTime int32 `protobuf:"varint,16,opt,name=cooling_time,json=coolingTime,proto3" json:"cooling_time,omitempty"`
	// 临近液池冷却时间
	NearCoolingTime int32 `protobuf:"varint,17,opt,name=near_cooling_time,json=nearCoolingTime,proto3" json:"near_cooling_time,omitempty"`
	// 着火冷却水供给范围和强度
	SupplyStrength float32 `protobuf:"fixed32,18,opt,name=supply_strength,json=supplyStrength,proto3" json:"supply_strength,omitempty"`
	// 临近冷却水供给范围和强度
	NearSupplyStrength float32 `protobuf:"fixed32,19,opt,name=near_supply_strength,json=nearSupplyStrength,proto3" json:"near_supply_strength,omitempty"`
	// 单只泡沫炮流量
	SingleFlow float32 `protobuf:"fixed32,20,opt,name=single_flow,json=singleFlow,proto3" json:"single_flow,omitempty"`
}

func (x *CoolingWaterSaveRequest) Reset() {
	*x = CoolingWaterSaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingWaterSaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingWaterSaveRequest) ProtoMessage() {}

func (x *CoolingWaterSaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingWaterSaveRequest.ProtoReflect.Descriptor instead.
func (*CoolingWaterSaveRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{25}
}

func (x *CoolingWaterSaveRequest) GetFlowTheory() float32 {
	if x != nil {
		return x.FlowTheory
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetFlowActual() float32 {
	if x != nil {
		return x.FlowActual
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearFlowTheory() float32 {
	if x != nil {
		return x.NearFlowTheory
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearFlowActual() float32 {
	if x != nil {
		return x.NearFlowActual
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetUsageTheory() float32 {
	if x != nil {
		return x.UsageTheory
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetUsageActual() float32 {
	if x != nil {
		return x.UsageActual
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearUsageTheory() float32 {
	if x != nil {
		return x.NearUsageTheory
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearUsageActual() float32 {
	if x != nil {
		return x.NearUsageActual
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetTotalUsageTheory() float32 {
	if x != nil {
		return x.TotalUsageTheory
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetTotalUsageActual() float32 {
	if x != nil {
		return x.TotalUsageActual
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearNum() int32 {
	if x != nil {
		return x.NearNum
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetDiameter() float32 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearDiameter() float32 {
	if x != nil {
		return x.NearDiameter
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetCoolingTime() int32 {
	if x != nil {
		return x.CoolingTime
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearCoolingTime() int32 {
	if x != nil {
		return x.NearCoolingTime
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetSupplyStrength() float32 {
	if x != nil {
		return x.SupplyStrength
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetNearSupplyStrength() float32 {
	if x != nil {
		return x.NearSupplyStrength
	}
	return 0
}

func (x *CoolingWaterSaveRequest) GetSingleFlow() float32 {
	if x != nil {
		return x.SingleFlow
	}
	return 0
}

type CoolingWaterSaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CoolingWaterSaveResponse) Reset() {
	*x = CoolingWaterSaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolingWaterSaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolingWaterSaveResponse) ProtoMessage() {}

func (x *CoolingWaterSaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolingWaterSaveResponse.ProtoReflect.Descriptor instead.
func (*CoolingWaterSaveResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{26}
}

type FireExtinguishing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Num  int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *FireExtinguishing) Reset() {
	*x = FireExtinguishing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireExtinguishing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireExtinguishing) ProtoMessage() {}

func (x *FireExtinguishing) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireExtinguishing.ProtoReflect.Descriptor instead.
func (*FireExtinguishing) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{27}
}

func (x *FireExtinguishing) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FireExtinguishing) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type EquipmentPersonDemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泡沫枪
	Foams []*FireExtinguishing `protobuf:"bytes,1,rep,name=foams,proto3" json:"foams,omitempty"`
	// 冷却着火罐水枪
	CoolingTanks []*FireExtinguishing `protobuf:"bytes,2,rep,name=cooling_tanks,json=coolingTanks,proto3" json:"cooling_tanks,omitempty"`
	// 冷却邻近罐水枪
	CoolingNearTanks []*FireExtinguishing `protobuf:"bytes,3,rep,name=cooling_near_tanks,json=coolingNearTanks,proto3" json:"cooling_near_tanks,omitempty"`
	// 泡沫灭火剂实际流量
	FoamFlow float32 `protobuf:"fixed32,4,opt,name=foam_flow,json=foamFlow,proto3" json:"foam_flow,omitempty"`
	// 冷却着火罐实际水流量
	CoolingFlow float32 `protobuf:"fixed32,5,opt,name=cooling_flow,json=coolingFlow,proto3" json:"cooling_flow,omitempty"`
	// 冷却临近罐实际水流量
	CoolingNearFlow float32 `protobuf:"fixed32,6,opt,name=cooling_near_flow,json=coolingNearFlow,proto3" json:"cooling_near_flow,omitempty"`
	// 泡沫灭火车流量
	FoamTruckFlow float32 `protobuf:"fixed32,7,opt,name=foam_truck_flow,json=foamTruckFlow,proto3" json:"foam_truck_flow,omitempty"`
	// 水罐车流量
	WaterTruckFlow float32 `protobuf:"fixed32,8,opt,name=water_truck_flow,json=waterTruckFlow,proto3" json:"water_truck_flow,omitempty"`
}

func (x *EquipmentPersonDemandRequest) Reset() {
	*x = EquipmentPersonDemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentPersonDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentPersonDemandRequest) ProtoMessage() {}

func (x *EquipmentPersonDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentPersonDemandRequest.ProtoReflect.Descriptor instead.
func (*EquipmentPersonDemandRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{28}
}

func (x *EquipmentPersonDemandRequest) GetFoams() []*FireExtinguishing {
	if x != nil {
		return x.Foams
	}
	return nil
}

func (x *EquipmentPersonDemandRequest) GetCoolingTanks() []*FireExtinguishing {
	if x != nil {
		return x.CoolingTanks
	}
	return nil
}

func (x *EquipmentPersonDemandRequest) GetCoolingNearTanks() []*FireExtinguishing {
	if x != nil {
		return x.CoolingNearTanks
	}
	return nil
}

func (x *EquipmentPersonDemandRequest) GetFoamFlow() float32 {
	if x != nil {
		return x.FoamFlow
	}
	return 0
}

func (x *EquipmentPersonDemandRequest) GetCoolingFlow() float32 {
	if x != nil {
		return x.CoolingFlow
	}
	return 0
}

func (x *EquipmentPersonDemandRequest) GetCoolingNearFlow() float32 {
	if x != nil {
		return x.CoolingNearFlow
	}
	return 0
}

func (x *EquipmentPersonDemandRequest) GetFoamTruckFlow() float32 {
	if x != nil {
		return x.FoamTruckFlow
	}
	return 0
}

func (x *EquipmentPersonDemandRequest) GetWaterTruckFlow() float32 {
	if x != nil {
		return x.WaterTruckFlow
	}
	return 0
}

type Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 型号
	ModelVersion string `protobuf:"bytes,2,opt,name=modelVersion,proto3" json:"modelVersion,omitempty"`
	// 操作人数
	OperatorNum int32 `protobuf:"varint,3,opt,name=operatorNum,proto3" json:"operatorNum,omitempty"`
	// 数量
	Num int32 `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *Equipment) Reset() {
	*x = Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equipment) ProtoMessage() {}

func (x *Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equipment.ProtoReflect.Descriptor instead.
func (*Equipment) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{29}
}

func (x *Equipment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Equipment) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *Equipment) GetOperatorNum() int32 {
	if x != nil {
		return x.OperatorNum
	}
	return 0
}

func (x *Equipment) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type EquipmentPersonDemandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泡沫枪
	Eqs []*Equipment `protobuf:"bytes,1,rep,name=eqs,proto3" json:"eqs,omitempty"`
}

func (x *EquipmentPersonDemandResponse) Reset() {
	*x = EquipmentPersonDemandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentPersonDemandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentPersonDemandResponse) ProtoMessage() {}

func (x *EquipmentPersonDemandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentPersonDemandResponse.ProtoReflect.Descriptor instead.
func (*EquipmentPersonDemandResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{30}
}

func (x *EquipmentPersonDemandResponse) GetEqs() []*Equipment {
	if x != nil {
		return x.Eqs
	}
	return nil
}

type EquipmentRequireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId int32 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *EquipmentRequireRequest) Reset() {
	*x = EquipmentRequireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentRequireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentRequireRequest) ProtoMessage() {}

func (x *EquipmentRequireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentRequireRequest.ProtoReflect.Descriptor instead.
func (*EquipmentRequireRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{31}
}

func (x *EquipmentRequireRequest) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type EquipmentRequireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 泡沫灭火剂实际流量
	FoamFlow float32 `protobuf:"fixed32,1,opt,name=foam_flow,json=foamFlow,proto3" json:"foam_flow,omitempty"`
	// 冷却着火液池实际水流量
	Flow float32 `protobuf:"fixed32,2,opt,name=flow,proto3" json:"flow,omitempty"`
	// 冷却临近液池实际水流量
	NearFlow float32 `protobuf:"fixed32,3,opt,name=near_flow,json=nearFlow,proto3" json:"near_flow,omitempty"`
}

func (x *EquipmentRequireResponse) Reset() {
	*x = EquipmentRequireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentRequireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentRequireResponse) ProtoMessage() {}

func (x *EquipmentRequireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentRequireResponse.ProtoReflect.Descriptor instead.
func (*EquipmentRequireResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{32}
}

func (x *EquipmentRequireResponse) GetFoamFlow() float32 {
	if x != nil {
		return x.FoamFlow
	}
	return 0
}

func (x *EquipmentRequireResponse) GetFlow() float32 {
	if x != nil {
		return x.Flow
	}
	return 0
}

func (x *EquipmentRequireResponse) GetNearFlow() float32 {
	if x != nil {
		return x.NearFlow
	}
	return 0
}

type MaterialBurningHeatGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MaterialBurningHeatGetRequest) Reset() {
	*x = MaterialBurningHeatGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialBurningHeatGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialBurningHeatGetRequest) ProtoMessage() {}

func (x *MaterialBurningHeatGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialBurningHeatGetRequest.ProtoReflect.Descriptor instead.
func (*MaterialBurningHeatGetRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{33}
}

type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BurningHeat float32 `protobuf:"fixed32,2,opt,name=burning_heat,json=burningHeat,proto3" json:"burning_heat,omitempty"`
}

func (x *Material) Reset() {
	*x = Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{34}
}

func (x *Material) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Material) GetBurningHeat() float32 {
	if x != nil {
		return x.BurningHeat
	}
	return 0
}

type MaterialBurningHeatGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Materials []*Material `protobuf:"bytes,1,rep,name=materials,proto3" json:"materials,omitempty"`
}

func (x *MaterialBurningHeatGetResponse) Reset() {
	*x = MaterialBurningHeatGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialBurningHeatGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialBurningHeatGetResponse) ProtoMessage() {}

func (x *MaterialBurningHeatGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialBurningHeatGetResponse.ProtoReflect.Descriptor instead.
func (*MaterialBurningHeatGetResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{35}
}

func (x *MaterialBurningHeatGetResponse) GetMaterials() []*Material {
	if x != nil {
		return x.Materials
	}
	return nil
}

type EnterpriseAreaGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnterpriseId int32 `protobuf:"varint,1,opt,name=enterprise_id,json=enterpriseId,proto3" json:"enterprise_id,omitempty"`
}

func (x *EnterpriseAreaGetRequest) Reset() {
	*x = EnterpriseAreaGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseAreaGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseAreaGetRequest) ProtoMessage() {}

func (x *EnterpriseAreaGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseAreaGetRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseAreaGetRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{36}
}

func (x *EnterpriseAreaGetRequest) GetEnterpriseId() int32 {
	if x != nil {
		return x.EnterpriseId
	}
	return 0
}

type LngLat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lng float64 `protobuf:"fixed64,1,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *LngLat) Reset() {
	*x = LngLat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LngLat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LngLat) ProtoMessage() {}

func (x *LngLat) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LngLat.ProtoReflect.Descriptor instead.
func (*LngLat) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{37}
}

func (x *LngLat) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *LngLat) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path []*LngLat `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{38}
}

func (x *Point) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Point) GetPath() []*LngLat {
	if x != nil {
		return x.Path
	}
	return nil
}

type EnterpriseAreaGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *EnterpriseAreaGetResponse) Reset() {
	*x = EnterpriseAreaGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseAreaGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseAreaGetResponse) ProtoMessage() {}

func (x *EnterpriseAreaGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseAreaGetResponse.ProtoReflect.Descriptor instead.
func (*EnterpriseAreaGetResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{39}
}

func (x *EnterpriseAreaGetResponse) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type EnterprisesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterprisesGetRequest) Reset() {
	*x = EnterprisesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterprisesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterprisesGetRequest) ProtoMessage() {}

func (x *EnterprisesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterprisesGetRequest.ProtoReflect.Descriptor instead.
func (*EnterprisesGetRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{40}
}

type Enterprise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Lng  float64 `protobuf:"fixed64,3,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat  float64 `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *Enterprise) Reset() {
	*x = Enterprise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enterprise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enterprise) ProtoMessage() {}

func (x *Enterprise) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enterprise.ProtoReflect.Descriptor instead.
func (*Enterprise) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{41}
}

func (x *Enterprise) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Enterprise) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enterprise) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Enterprise) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type EnterprisesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enterprises []*Enterprise `protobuf:"bytes,1,rep,name=enterprises,proto3" json:"enterprises,omitempty"`
}

func (x *EnterprisesGetResponse) Reset() {
	*x = EnterprisesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterprisesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterprisesGetResponse) ProtoMessage() {}

func (x *EnterprisesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterprisesGetResponse.ProtoReflect.Descriptor instead.
func (*EnterprisesGetResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{42}
}

func (x *EnterprisesGetResponse) GetEnterprises() []*Enterprise {
	if x != nil {
		return x.Enterprises
	}
	return nil
}

type EnterpriseGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnterpriseGetRequest) Reset() {
	*x = EnterpriseGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseGetRequest) ProtoMessage() {}

func (x *EnterpriseGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseGetRequest.ProtoReflect.Descriptor instead.
func (*EnterpriseGetRequest) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{43}
}

func (x *EnterpriseGetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EnterpriseGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enterprise *Enterprise `protobuf:"bytes,1,opt,name=enterprise,proto3" json:"enterprise,omitempty"`
}

func (x *EnterpriseGetResponse) Reset() {
	*x = EnterpriseGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accsim_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseGetResponse) ProtoMessage() {}

func (x *EnterpriseGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accsim_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseGetResponse.ProtoReflect.Descriptor instead.
func (*EnterpriseGetResponse) Descriptor() ([]byte, []int) {
	return file_accsim_proto_rawDescGZIP(), []int{44}
}

func (x *EnterpriseGetResponse) GetEnterprise() *Enterprise {
	if x != nil {
		return x.Enterprise
	}
	return nil
}

var File_accsim_proto protoreflect.FileDescriptor

var file_accsim_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xee, 0x03, 0x0a,
	0x08, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x67,
	0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x54, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x78, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x79, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a,
	0x13, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69,
	0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x09, 0x61, 0x63, 0x63, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x02, 0x78, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x02, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x0a, 0x15, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcf, 0x03, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x6a, 0x75,
	0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x6a, 0x75,
	0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77,
	0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x61, 0x6e,
	0x6b, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x78, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x73, 0x61, 0x66, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x13, 0x50,
	0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x61, 0x6e,
	0x6b, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x22, 0x86, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x6f,
	0x6c, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6c, 0x74, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6c,
	0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x6d,
	0x65, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6a, 0x75,
	0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x78, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x78, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x79, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x22, 0x8b, 0x03, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x72, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x61,
	0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x22,
	0x89, 0x03, 0x0a, 0x17, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6c, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x69, 0x6c, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e,
	0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x78, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x66, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x73, 0x61, 0x66, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x6c, 0x52, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x54, 0x61, 0x6e, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69,
	0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x54, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x15, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x67,
	0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x81, 0x03, 0x0a, 0x12, 0x4a, 0x65, 0x74, 0x46, 0x69,
	0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48,
	0x65, 0x61, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x75,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x13, 0x4a,
	0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x6a, 0x75,
	0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6a,
	0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x78,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x79,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x75, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x75,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x44,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x6c, 0x6c,
	0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x6c, 0x65, 0x61, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa0, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x6a,
	0x75, 0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x6a, 0x75,
	0x72, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x78, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x75, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x68, 0x65, 0x61, 0x74, 0x52, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x75, 0x78, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x61, 0x6e, 0x6b,
	0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0xfd, 0x06, 0x0a, 0x1f, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x66, 0x69, 0x72,
	0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x72, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1b, 0x66, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x3b, 0x0a,
	0x1a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c,
	0x66, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x1f,
	0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x66, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69,
	0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x72, 0x65,
	0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22,
	0xae, 0x08, 0x0a, 0x1c, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x66, 0x69, 0x72, 0x65, 0x45, 0x78,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x66,
	0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x65,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x66, 0x69, 0x72,
	0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1c, 0x66, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x50, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x65, 0x6f,
	0x72, 0x79, 0x12, 0x50, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66,
	0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x72, 0x65,
	0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd4, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x61, 0x72,
	0x5f, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x61,
	0x72, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0xac, 0x03, 0x0a, 0x1a, 0x43, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6e,
	0x65, 0x61, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x6e, 0x65, 0x61, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x61, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0xfd, 0x05, 0x0a, 0x17, 0x43, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x68,
	0x65, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x6e, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x46,
	0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68,
	0x65, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x61, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x61, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x61, 0x72, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x68, 0x65, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6e, 0x65, 0x61, 0x72, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x61, 0x72,
	0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x96,
	0x03, 0x0a, 0x1c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x05, 0x66, 0x6f, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x66, 0x6f, 0x61, 0x6d, 0x73,
	0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x6e, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6e, 0x6b, 0x73,
	0x12, 0x47, 0x0a, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x61, 0x72,
	0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x4e, 0x65, 0x61, 0x72, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x61,
	0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6f,
	0x61, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6f,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x61,
	0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x61, 0x6d, 0x5f, 0x74, 0x72,
	0x75, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x66, 0x6f, 0x61, 0x6d, 0x54, 0x72, 0x75, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x28, 0x0a,
	0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x75, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x77, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x22, 0x44, 0x0a, 0x1d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x03, 0x65, 0x71, 0x73, 0x22, 0x34, 0x0a, 0x17, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x18,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x61, 0x6d,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6f, 0x61,
	0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65,
	0x61, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62,
	0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x22, 0x50, 0x0a, 0x1e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61,
	0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3f, 0x0a, 0x18,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x22, 0x2c, 0x0a,
	0x06, 0x4c, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x22, 0x3f, 0x0a, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e,
	0x4c, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x42, 0x0a, 0x19,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x63, 0x63, 0x73,
	0x69, 0x6d, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x0a, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x22,
	0x4e, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x22,
	0x26, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x32, 0xe0, 0x0c, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x53, 0x69, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x41,
	0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x61, 0x76, 0x65, 0x12, 0x1b,
	0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63,
	0x63, 0x73, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x63, 0x63,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x63,
	0x63, 0x73, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63,
	0x73, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x41, 0x63,
	0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63,
	0x73, 0x69, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d,
	0x2e, 0x41, 0x63, 0x63, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x72,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x12, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x6c, 0x52, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x63, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x53, 0x65,
	0x61, 0x6c, 0x52, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x52,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x4a, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x1a,
	0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x4a, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63,
	0x73, 0x69, 0x6d, 0x2e, 0x4a, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x6c, 0x46,
	0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d,
	0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x42, 0x61,
	0x6c, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x2e,
	0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x15, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x78, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63,
	0x73, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x76, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x43,
	0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e,
	0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x47, 0x65, 0x74, 0x12,
	0x25, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x74, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x65, 0x61, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63,
	0x73, 0x69, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x73,
	0x69, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63,
	0x73, 0x69, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x73, 0x69,
	0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x73, 0x61, 0x66, 0x65, 0x2f,
	0x61, 0x63, 0x63, 0x73, 0x69, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x61, 0x63, 0x63, 0x73, 0x69,
	0x6d, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accsim_proto_rawDescOnce sync.Once
	file_accsim_proto_rawDescData = file_accsim_proto_rawDesc
)

func file_accsim_proto_rawDescGZIP() []byte {
	file_accsim_proto_rawDescOnce.Do(func() {
		file_accsim_proto_rawDescData = protoimpl.X.CompressGZIP(file_accsim_proto_rawDescData)
	})
	return file_accsim_proto_rawDescData
}

var file_accsim_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_accsim_proto_goTypes = []interface{}{
	(*AccSceneGetRequest)(nil),              // 0: accsim.AccSceneGetRequest
	(*AccScene)(nil),                        // 1: accsim.AccScene
	(*AccSceneGetResponse)(nil),             // 2: accsim.AccSceneGetResponse
	(*AccSceneSaveRequest)(nil),             // 3: accsim.AccSceneSaveRequest
	(*AccSceneSaveResponse)(nil),            // 4: accsim.AccSceneSaveResponse
	(*AccSceneDeleteRequest)(nil),           // 5: accsim.AccSceneDeleteRequest
	(*AccSceneDeleteResponse)(nil),          // 6: accsim.AccSceneDeleteResponse
	(*AccSceneInfoRequest)(nil),             // 7: accsim.AccSceneInfoRequest
	(*AccSceneInfoResponse)(nil),            // 8: accsim.AccSceneInfoResponse
	(*PoolFireCalcRequest)(nil),             // 9: accsim.PoolFireCalcRequest
	(*PoolFireCalcResponse)(nil),            // 10: accsim.PoolFireCalcResponse
	(*FlowingFireCalcRequest)(nil),          // 11: accsim.FlowingFireCalcRequest
	(*FlowingFireCalcResponse)(nil),         // 12: accsim.FlowingFireCalcResponse
	(*SealRingCalcRequest)(nil),             // 13: accsim.SealRingCalcRequest
	(*SealRingCalcResponse)(nil),            // 14: accsim.SealRingCalcResponse
	(*JetFireCalcRequest)(nil),              // 15: accsim.JetFireCalcRequest
	(*JetFireCalcResponse)(nil),             // 16: accsim.JetFireCalcResponse
	(*BallFireCalcRequest)(nil),             // 17: accsim.BallFireCalcRequest
	(*BallFireCalcResponse)(nil),            // 18: accsim.BallFireCalcResponse
	(*FireExtinguishingDemandRequest)(nil),  // 19: accsim.FireExtinguishingDemandRequest
	(*FireExtinguishingDemandResponse)(nil), // 20: accsim.FireExtinguishingDemandResponse
	(*FireExtinguishingSaveRequest)(nil),    // 21: accsim.FireExtinguishingSaveRequest
	(*FireExtinguishingSaveResponse)(nil),   // 22: accsim.FireExtinguishingSaveResponse
	(*CoolingWaterDemandRequest)(nil),       // 23: accsim.CoolingWaterDemandRequest
	(*CoolingWaterDemandResponse)(nil),      // 24: accsim.CoolingWaterDemandResponse
	(*CoolingWaterSaveRequest)(nil),         // 25: accsim.CoolingWaterSaveRequest
	(*CoolingWaterSaveResponse)(nil),        // 26: accsim.CoolingWaterSaveResponse
	(*FireExtinguishing)(nil),               // 27: accsim.FireExtinguishing
	(*EquipmentPersonDemandRequest)(nil),    // 28: accsim.EquipmentPersonDemandRequest
	(*Equipment)(nil),                       // 29: accsim.Equipment
	(*EquipmentPersonDemandResponse)(nil),   // 30: accsim.EquipmentPersonDemandResponse
	(*EquipmentRequireRequest)(nil),         // 31: accsim.EquipmentRequireRequest
	(*EquipmentRequireResponse)(nil),        // 32: accsim.EquipmentRequireResponse
	(*MaterialBurningHeatGetRequest)(nil),   // 33: accsim.MaterialBurningHeatGetRequest
	(*Material)(nil),                        // 34: accsim.Material
	(*MaterialBurningHeatGetResponse)(nil),  // 35: accsim.MaterialBurningHeatGetResponse
	(*EnterpriseAreaGetRequest)(nil),        // 36: accsim.EnterpriseAreaGetRequest
	(*LngLat)(nil),                          // 37: accsim.LngLat
	(*Point)(nil),                           // 38: accsim.Point
	(*EnterpriseAreaGetResponse)(nil),       // 39: accsim.EnterpriseAreaGetResponse
	(*EnterprisesGetRequest)(nil),           // 40: accsim.EnterprisesGetRequest
	(*Enterprise)(nil),                      // 41: accsim.Enterprise
	(*EnterprisesGetResponse)(nil),          // 42: accsim.EnterprisesGetResponse
	(*EnterpriseGetRequest)(nil),            // 43: accsim.EnterpriseGetRequest
	(*EnterpriseGetResponse)(nil),           // 44: accsim.EnterpriseGetResponse
}
var file_accsim_proto_depIdxs = []int32{
	1,  // 0: accsim.AccSceneGetResponse.acc_scenes:type_name -> accsim.AccScene
	27, // 1: accsim.EquipmentPersonDemandRequest.foams:type_name -> accsim.FireExtinguishing
	27, // 2: accsim.EquipmentPersonDemandRequest.cooling_tanks:type_name -> accsim.FireExtinguishing
	27, // 3: accsim.EquipmentPersonDemandRequest.cooling_near_tanks:type_name -> accsim.FireExtinguishing
	29, // 4: accsim.EquipmentPersonDemandResponse.eqs:type_name -> accsim.Equipment
	34, // 5: accsim.MaterialBurningHeatGetResponse.materials:type_name -> accsim.Material
	37, // 6: accsim.Point.path:type_name -> accsim.LngLat
	38, // 7: accsim.EnterpriseAreaGetResponse.points:type_name -> accsim.Point
	41, // 8: accsim.EnterprisesGetResponse.enterprises:type_name -> accsim.Enterprise
	41, // 9: accsim.EnterpriseGetResponse.enterprise:type_name -> accsim.Enterprise
	0,  // 10: accsim.AccSimService.AccSceneGet:input_type -> accsim.AccSceneGetRequest
	3,  // 11: accsim.AccSimService.AccSceneSave:input_type -> accsim.AccSceneSaveRequest
	5,  // 12: accsim.AccSimService.AccSceneDelete:input_type -> accsim.AccSceneDeleteRequest
	7,  // 13: accsim.AccSimService.AccSceneInfo:input_type -> accsim.AccSceneInfoRequest
	9,  // 14: accsim.AccSimService.PoolFireCalc:input_type -> accsim.PoolFireCalcRequest
	11, // 15: accsim.AccSimService.FlowingFireCalc:input_type -> accsim.FlowingFireCalcRequest
	13, // 16: accsim.AccSimService.SealRingCalc:input_type -> accsim.SealRingCalcRequest
	15, // 17: accsim.AccSimService.JetFireCalc:input_type -> accsim.JetFireCalcRequest
	17, // 18: accsim.AccSimService.BallFireCalc:input_type -> accsim.BallFireCalcRequest
	19, // 19: accsim.AccSimService.FireExtinguishingDemand:input_type -> accsim.FireExtinguishingDemandRequest
	21, // 20: accsim.AccSimService.FireExtinguishingSave:input_type -> accsim.FireExtinguishingSaveRequest
	23, // 21: accsim.AccSimService.CoolingWaterDemand:input_type -> accsim.CoolingWaterDemandRequest
	25, // 22: accsim.AccSimService.CoolingWaterSave:input_type -> accsim.CoolingWaterSaveRequest
	28, // 23: accsim.AccSimService.EquipmentPersonDemand:input_type -> accsim.EquipmentPersonDemandRequest
	31, // 24: accsim.AccSimService.EquipmentRequire:input_type -> accsim.EquipmentRequireRequest
	33, // 25: accsim.AccSimService.MaterialBurningHeatGet:input_type -> accsim.MaterialBurningHeatGetRequest
	36, // 26: accsim.AccSimService.EnterpriseAreaGet:input_type -> accsim.EnterpriseAreaGetRequest
	40, // 27: accsim.AccSimService.EnterprisesGet:input_type -> accsim.EnterprisesGetRequest
	43, // 28: accsim.AccSimService.EnterpriseGet:input_type -> accsim.EnterpriseGetRequest
	2,  // 29: accsim.AccSimService.AccSceneGet:output_type -> accsim.AccSceneGetResponse
	4,  // 30: accsim.AccSimService.AccSceneSave:output_type -> accsim.AccSceneSaveResponse
	6,  // 31: accsim.AccSimService.AccSceneDelete:output_type -> accsim.AccSceneDeleteResponse
	8,  // 32: accsim.AccSimService.AccSceneInfo:output_type -> accsim.AccSceneInfoResponse
	10, // 33: accsim.AccSimService.PoolFireCalc:output_type -> accsim.PoolFireCalcResponse
	12, // 34: accsim.AccSimService.FlowingFireCalc:output_type -> accsim.FlowingFireCalcResponse
	14, // 35: accsim.AccSimService.SealRingCalc:output_type -> accsim.SealRingCalcResponse
	16, // 36: accsim.AccSimService.JetFireCalc:output_type -> accsim.JetFireCalcResponse
	18, // 37: accsim.AccSimService.BallFireCalc:output_type -> accsim.BallFireCalcResponse
	20, // 38: accsim.AccSimService.FireExtinguishingDemand:output_type -> accsim.FireExtinguishingDemandResponse
	22, // 39: accsim.AccSimService.FireExtinguishingSave:output_type -> accsim.FireExtinguishingSaveResponse
	24, // 40: accsim.AccSimService.CoolingWaterDemand:output_type -> accsim.CoolingWaterDemandResponse
	26, // 41: accsim.AccSimService.CoolingWaterSave:output_type -> accsim.CoolingWaterSaveResponse
	30, // 42: accsim.AccSimService.EquipmentPersonDemand:output_type -> accsim.EquipmentPersonDemandResponse
	32, // 43: accsim.AccSimService.EquipmentRequire:output_type -> accsim.EquipmentRequireResponse
	35, // 44: accsim.AccSimService.MaterialBurningHeatGet:output_type -> accsim.MaterialBurningHeatGetResponse
	39, // 45: accsim.AccSimService.EnterpriseAreaGet:output_type -> accsim.EnterpriseAreaGetResponse
	42, // 46: accsim.AccSimService.EnterprisesGet:output_type -> accsim.EnterprisesGetResponse
	44, // 47: accsim.AccSimService.EnterpriseGet:output_type -> accsim.EnterpriseGetResponse
	29, // [29:48] is the sub-list for method output_type
	10, // [10:29] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_accsim_proto_init() }
func file_accsim_proto_init() {
	if File_accsim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accsim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneSaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccSceneInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolFireCalcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolFireCalcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowingFireCalcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowingFireCalcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealRingCalcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealRingCalcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JetFireCalcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JetFireCalcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallFireCalcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallFireCalcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireExtinguishingDemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireExtinguishingDemandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireExtinguishingSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireExtinguishingSaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingWaterDemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingWaterDemandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingWaterSaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolingWaterSaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireExtinguishing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentPersonDemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentPersonDemandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentRequireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentRequireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialBurningHeatGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialBurningHeatGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseAreaGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LngLat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseAreaGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterprisesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enterprise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterprisesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accsim_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accsim_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accsim_proto_goTypes,
		DependencyIndexes: file_accsim_proto_depIdxs,
		MessageInfos:      file_accsim_proto_msgTypes,
	}.Build()
	File_accsim_proto = out.File
	file_accsim_proto_rawDesc = nil
	file_accsim_proto_goTypes = nil
	file_accsim_proto_depIdxs = nil
}
