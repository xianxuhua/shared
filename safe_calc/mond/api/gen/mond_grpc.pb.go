// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: mond.proto

package mondpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MondService_MaterialCoefficientSaveUnknownMaterial_FullMethodName           = "/mond.MondService/MaterialCoefficientSaveUnknownMaterial"
	MondService_MaterialCoefficientGetKnownCoefficient_FullMethodName           = "/mond.MondService/MaterialCoefficientGetKnownCoefficient"
	MondService_MaterialCoefficientGetKnownNames_FullMethodName                 = "/mond.MondService/MaterialCoefficientGetKnownNames"
	MondService_MaterialCoefficient_FullMethodName                              = "/mond.MondService/MaterialCoefficient"
	MondService_SpecialMaterialHazard_FullMethodName                            = "/mond.MondService/SpecialMaterialHazard"
	MondService_GeneralProcessHazard_FullMethodName                             = "/mond.MondService/GeneralProcessHazard"
	MondService_SpecialProcessHazard_FullMethodName                             = "/mond.MondService/SpecialProcessHazard"
	MondService_ArrangementHazardCoefficient_FullMethodName                     = "/mond.MondService/ArrangementHazardCoefficient"
	MondService_NumHazardCoefficient_FullMethodName                             = "/mond.MondService/NumHazardCoefficient"
	MondService_PoisonHazardCoefficient_FullMethodName                          = "/mond.MondService/PoisonHazardCoefficient"
	MondService_PoisonHazardCoefficientGetTLVTypeExposure_FullMethodName        = "/mond.MondService/PoisonHazardCoefficientGetTLVTypeExposure"
	MondService_ContainerSystemCoefficient_FullMethodName                       = "/mond.MondService/ContainerSystemCoefficient"
	MondService_ProcessManagementCoefficient_FullMethodName                     = "/mond.MondService/ProcessManagementCoefficient"
	MondService_MaterialIsolationCoefficient_FullMethodName                     = "/mond.MondService/MaterialIsolationCoefficient"
	MondService_SafetyAttitudeCoefficient_FullMethodName                        = "/mond.MondService/SafetyAttitudeCoefficient"
	MondService_FirePreventionCoefficient_FullMethodName                        = "/mond.MondService/FirePreventionCoefficient"
	MondService_FireFightingActivityCoefficient_FullMethodName                  = "/mond.MondService/FireFightingActivityCoefficient"
	MondService_InitialCommentIndexFinialCompensationCoefficient_FullMethodName = "/mond.MondService/InitialCommentIndexFinialCompensationCoefficient"
	MondService_MaterialsGet_FullMethodName                                     = "/mond.MondService/MaterialsGet"
	MondService_MaterialEdit_FullMethodName                                     = "/mond.MondService/MaterialEdit"
	MondService_MaterialDelete_FullMethodName                                   = "/mond.MondService/MaterialDelete"
)

// MondServiceClient is the client API for MondService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MondServiceClient interface {
	// 保存未知物质
	MaterialCoefficientSaveUnknownMaterial(ctx context.Context, in *MaterialCoefficientSaveUnknownMaterialRequest, opts ...grpc.CallOption) (*MaterialCoefficientSaveUnknownMaterialResponse, error)
	// 根据名称查询已知物质系数
	MaterialCoefficientGetKnownCoefficient(ctx context.Context, in *MaterialCoefficientGetKnownCoefficientRequest, opts ...grpc.CallOption) (*MaterialCoefficientGetKnownCoefficientResponse, error)
	// 所有已知物质名称
	MaterialCoefficientGetKnownNames(ctx context.Context, in *MaterialCoefficientGetKnownNamesRequest, opts ...grpc.CallOption) (*MaterialCoefficientGetKnownNamesResponse, error)
	// 计算物质系数
	MaterialCoefficient(ctx context.Context, in *MaterialCoefficientRequest, opts ...grpc.CallOption) (*MaterialCoefficientResponse, error)
	// 计算特殊物质危险性
	SpecialMaterialHazard(ctx context.Context, in *SpecialMaterialHazardRequest, opts ...grpc.CallOption) (*SpecialMaterialHazardResponse, error)
	// 计算一般工艺危险性
	GeneralProcessHazard(ctx context.Context, in *GeneralProcessHazardRequest, opts ...grpc.CallOption) (*GeneralProcessHazardResponse, error)
	// 计算特殊工艺危险性
	SpecialProcessHazard(ctx context.Context, in *SpecialProcessHazardRequest, opts ...grpc.CallOption) (*SpecialProcessHazardResponse, error)
	// 计算布置危险性系数
	ArrangementHazardCoefficient(ctx context.Context, in *ArrangementHazardCoefficientRequest, opts ...grpc.CallOption) (*ArrangementHazardCoefficientResponse, error)
	// 计算数量危险性系数
	NumHazardCoefficient(ctx context.Context, in *NumHazardCoefficientRequest, opts ...grpc.CallOption) (*NumHazardCoefficientResponse, error)
	// 计算毒性危险性系数
	PoisonHazardCoefficient(ctx context.Context, in *PoisonHazardCoefficientRequest, opts ...grpc.CallOption) (*PoisonHazardCoefficientResponse, error)
	// 获取计算毒性危险性的参数
	PoisonHazardCoefficientGetTLVTypeExposure(ctx context.Context, in *PoisonHazardCoefficientGetTLVTypeExposureRequest, opts ...grpc.CallOption) (*PoisonHazardCoefficientGetTLVTypeExposureResponse, error)
	// 计算容器系统系数
	ContainerSystemCoefficient(ctx context.Context, in *ContainerSystemCoefficientRequest, opts ...grpc.CallOption) (*ContainerSystemCoefficientResponse, error)
	// 计算工艺管理系数
	ProcessManagementCoefficient(ctx context.Context, in *ProcessManagementCoefficientRequest, opts ...grpc.CallOption) (*ProcessManagementCoefficientResponse, error)
	// 计算物质隔离系数
	MaterialIsolationCoefficient(ctx context.Context, in *MaterialIsolationCoefficientRequest, opts ...grpc.CallOption) (*MaterialIsolationCoefficientResponse, error)
	// 计算安全态度系数
	SafetyAttitudeCoefficient(ctx context.Context, in *SafetyAttitudeCoefficientRequest, opts ...grpc.CallOption) (*SafetyAttitudeCoefficientResponse, error)
	// 计算防火系数
	FirePreventionCoefficient(ctx context.Context, in *FirePreventionCoefficientRequest, opts ...grpc.CallOption) (*FirePreventionCoefficientResponse, error)
	// 计算灭火活动系数
	FireFightingActivityCoefficient(ctx context.Context, in *FireFightingActivityCoefficientRequest, opts ...grpc.CallOption) (*FireFightingActivityCoefficientResponse, error)
	// 计算初期评价指数计算结果及范畴/最终补偿系数计算结果范畴
	InitialCommentIndexFinialCompensationCoefficient(ctx context.Context, in *InitialCommentIndexFinialCompensationCoefficientRequest, opts ...grpc.CallOption) (*InitialCommentIndexFinialCompensationCoefficientResponse, error)
	// 物质管理
	MaterialsGet(ctx context.Context, in *MaterialsGetRequest, opts ...grpc.CallOption) (*MaterialsGetResponse, error)
	MaterialEdit(ctx context.Context, in *MaterialEditRequest, opts ...grpc.CallOption) (*MaterialEditResponse, error)
	MaterialDelete(ctx context.Context, in *MaterialDeleteRequest, opts ...grpc.CallOption) (*MaterialDeleteResponse, error)
}

type mondServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMondServiceClient(cc grpc.ClientConnInterface) MondServiceClient {
	return &mondServiceClient{cc}
}

func (c *mondServiceClient) MaterialCoefficientSaveUnknownMaterial(ctx context.Context, in *MaterialCoefficientSaveUnknownMaterialRequest, opts ...grpc.CallOption) (*MaterialCoefficientSaveUnknownMaterialResponse, error) {
	out := new(MaterialCoefficientSaveUnknownMaterialResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialCoefficientSaveUnknownMaterial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialCoefficientGetKnownCoefficient(ctx context.Context, in *MaterialCoefficientGetKnownCoefficientRequest, opts ...grpc.CallOption) (*MaterialCoefficientGetKnownCoefficientResponse, error) {
	out := new(MaterialCoefficientGetKnownCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialCoefficientGetKnownCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialCoefficientGetKnownNames(ctx context.Context, in *MaterialCoefficientGetKnownNamesRequest, opts ...grpc.CallOption) (*MaterialCoefficientGetKnownNamesResponse, error) {
	out := new(MaterialCoefficientGetKnownNamesResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialCoefficientGetKnownNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialCoefficient(ctx context.Context, in *MaterialCoefficientRequest, opts ...grpc.CallOption) (*MaterialCoefficientResponse, error) {
	out := new(MaterialCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) SpecialMaterialHazard(ctx context.Context, in *SpecialMaterialHazardRequest, opts ...grpc.CallOption) (*SpecialMaterialHazardResponse, error) {
	out := new(SpecialMaterialHazardResponse)
	err := c.cc.Invoke(ctx, MondService_SpecialMaterialHazard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) GeneralProcessHazard(ctx context.Context, in *GeneralProcessHazardRequest, opts ...grpc.CallOption) (*GeneralProcessHazardResponse, error) {
	out := new(GeneralProcessHazardResponse)
	err := c.cc.Invoke(ctx, MondService_GeneralProcessHazard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) SpecialProcessHazard(ctx context.Context, in *SpecialProcessHazardRequest, opts ...grpc.CallOption) (*SpecialProcessHazardResponse, error) {
	out := new(SpecialProcessHazardResponse)
	err := c.cc.Invoke(ctx, MondService_SpecialProcessHazard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) ArrangementHazardCoefficient(ctx context.Context, in *ArrangementHazardCoefficientRequest, opts ...grpc.CallOption) (*ArrangementHazardCoefficientResponse, error) {
	out := new(ArrangementHazardCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_ArrangementHazardCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) NumHazardCoefficient(ctx context.Context, in *NumHazardCoefficientRequest, opts ...grpc.CallOption) (*NumHazardCoefficientResponse, error) {
	out := new(NumHazardCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_NumHazardCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) PoisonHazardCoefficient(ctx context.Context, in *PoisonHazardCoefficientRequest, opts ...grpc.CallOption) (*PoisonHazardCoefficientResponse, error) {
	out := new(PoisonHazardCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_PoisonHazardCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) PoisonHazardCoefficientGetTLVTypeExposure(ctx context.Context, in *PoisonHazardCoefficientGetTLVTypeExposureRequest, opts ...grpc.CallOption) (*PoisonHazardCoefficientGetTLVTypeExposureResponse, error) {
	out := new(PoisonHazardCoefficientGetTLVTypeExposureResponse)
	err := c.cc.Invoke(ctx, MondService_PoisonHazardCoefficientGetTLVTypeExposure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) ContainerSystemCoefficient(ctx context.Context, in *ContainerSystemCoefficientRequest, opts ...grpc.CallOption) (*ContainerSystemCoefficientResponse, error) {
	out := new(ContainerSystemCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_ContainerSystemCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) ProcessManagementCoefficient(ctx context.Context, in *ProcessManagementCoefficientRequest, opts ...grpc.CallOption) (*ProcessManagementCoefficientResponse, error) {
	out := new(ProcessManagementCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_ProcessManagementCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialIsolationCoefficient(ctx context.Context, in *MaterialIsolationCoefficientRequest, opts ...grpc.CallOption) (*MaterialIsolationCoefficientResponse, error) {
	out := new(MaterialIsolationCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialIsolationCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) SafetyAttitudeCoefficient(ctx context.Context, in *SafetyAttitudeCoefficientRequest, opts ...grpc.CallOption) (*SafetyAttitudeCoefficientResponse, error) {
	out := new(SafetyAttitudeCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_SafetyAttitudeCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) FirePreventionCoefficient(ctx context.Context, in *FirePreventionCoefficientRequest, opts ...grpc.CallOption) (*FirePreventionCoefficientResponse, error) {
	out := new(FirePreventionCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_FirePreventionCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) FireFightingActivityCoefficient(ctx context.Context, in *FireFightingActivityCoefficientRequest, opts ...grpc.CallOption) (*FireFightingActivityCoefficientResponse, error) {
	out := new(FireFightingActivityCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_FireFightingActivityCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) InitialCommentIndexFinialCompensationCoefficient(ctx context.Context, in *InitialCommentIndexFinialCompensationCoefficientRequest, opts ...grpc.CallOption) (*InitialCommentIndexFinialCompensationCoefficientResponse, error) {
	out := new(InitialCommentIndexFinialCompensationCoefficientResponse)
	err := c.cc.Invoke(ctx, MondService_InitialCommentIndexFinialCompensationCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialsGet(ctx context.Context, in *MaterialsGetRequest, opts ...grpc.CallOption) (*MaterialsGetResponse, error) {
	out := new(MaterialsGetResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialsGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialEdit(ctx context.Context, in *MaterialEditRequest, opts ...grpc.CallOption) (*MaterialEditResponse, error) {
	out := new(MaterialEditResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondServiceClient) MaterialDelete(ctx context.Context, in *MaterialDeleteRequest, opts ...grpc.CallOption) (*MaterialDeleteResponse, error) {
	out := new(MaterialDeleteResponse)
	err := c.cc.Invoke(ctx, MondService_MaterialDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MondServiceServer is the server API for MondService service.
// All implementations must embed UnimplementedMondServiceServer
// for forward compatibility
type MondServiceServer interface {
	// 保存未知物质
	MaterialCoefficientSaveUnknownMaterial(context.Context, *MaterialCoefficientSaveUnknownMaterialRequest) (*MaterialCoefficientSaveUnknownMaterialResponse, error)
	// 根据名称查询已知物质系数
	MaterialCoefficientGetKnownCoefficient(context.Context, *MaterialCoefficientGetKnownCoefficientRequest) (*MaterialCoefficientGetKnownCoefficientResponse, error)
	// 所有已知物质名称
	MaterialCoefficientGetKnownNames(context.Context, *MaterialCoefficientGetKnownNamesRequest) (*MaterialCoefficientGetKnownNamesResponse, error)
	// 计算物质系数
	MaterialCoefficient(context.Context, *MaterialCoefficientRequest) (*MaterialCoefficientResponse, error)
	// 计算特殊物质危险性
	SpecialMaterialHazard(context.Context, *SpecialMaterialHazardRequest) (*SpecialMaterialHazardResponse, error)
	// 计算一般工艺危险性
	GeneralProcessHazard(context.Context, *GeneralProcessHazardRequest) (*GeneralProcessHazardResponse, error)
	// 计算特殊工艺危险性
	SpecialProcessHazard(context.Context, *SpecialProcessHazardRequest) (*SpecialProcessHazardResponse, error)
	// 计算布置危险性系数
	ArrangementHazardCoefficient(context.Context, *ArrangementHazardCoefficientRequest) (*ArrangementHazardCoefficientResponse, error)
	// 计算数量危险性系数
	NumHazardCoefficient(context.Context, *NumHazardCoefficientRequest) (*NumHazardCoefficientResponse, error)
	// 计算毒性危险性系数
	PoisonHazardCoefficient(context.Context, *PoisonHazardCoefficientRequest) (*PoisonHazardCoefficientResponse, error)
	// 获取计算毒性危险性的参数
	PoisonHazardCoefficientGetTLVTypeExposure(context.Context, *PoisonHazardCoefficientGetTLVTypeExposureRequest) (*PoisonHazardCoefficientGetTLVTypeExposureResponse, error)
	// 计算容器系统系数
	ContainerSystemCoefficient(context.Context, *ContainerSystemCoefficientRequest) (*ContainerSystemCoefficientResponse, error)
	// 计算工艺管理系数
	ProcessManagementCoefficient(context.Context, *ProcessManagementCoefficientRequest) (*ProcessManagementCoefficientResponse, error)
	// 计算物质隔离系数
	MaterialIsolationCoefficient(context.Context, *MaterialIsolationCoefficientRequest) (*MaterialIsolationCoefficientResponse, error)
	// 计算安全态度系数
	SafetyAttitudeCoefficient(context.Context, *SafetyAttitudeCoefficientRequest) (*SafetyAttitudeCoefficientResponse, error)
	// 计算防火系数
	FirePreventionCoefficient(context.Context, *FirePreventionCoefficientRequest) (*FirePreventionCoefficientResponse, error)
	// 计算灭火活动系数
	FireFightingActivityCoefficient(context.Context, *FireFightingActivityCoefficientRequest) (*FireFightingActivityCoefficientResponse, error)
	// 计算初期评价指数计算结果及范畴/最终补偿系数计算结果范畴
	InitialCommentIndexFinialCompensationCoefficient(context.Context, *InitialCommentIndexFinialCompensationCoefficientRequest) (*InitialCommentIndexFinialCompensationCoefficientResponse, error)
	// 物质管理
	MaterialsGet(context.Context, *MaterialsGetRequest) (*MaterialsGetResponse, error)
	MaterialEdit(context.Context, *MaterialEditRequest) (*MaterialEditResponse, error)
	MaterialDelete(context.Context, *MaterialDeleteRequest) (*MaterialDeleteResponse, error)
	mustEmbedUnimplementedMondServiceServer()
}

// UnimplementedMondServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMondServiceServer struct {
}

func (UnimplementedMondServiceServer) MaterialCoefficientSaveUnknownMaterial(context.Context, *MaterialCoefficientSaveUnknownMaterialRequest) (*MaterialCoefficientSaveUnknownMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialCoefficientSaveUnknownMaterial not implemented")
}
func (UnimplementedMondServiceServer) MaterialCoefficientGetKnownCoefficient(context.Context, *MaterialCoefficientGetKnownCoefficientRequest) (*MaterialCoefficientGetKnownCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialCoefficientGetKnownCoefficient not implemented")
}
func (UnimplementedMondServiceServer) MaterialCoefficientGetKnownNames(context.Context, *MaterialCoefficientGetKnownNamesRequest) (*MaterialCoefficientGetKnownNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialCoefficientGetKnownNames not implemented")
}
func (UnimplementedMondServiceServer) MaterialCoefficient(context.Context, *MaterialCoefficientRequest) (*MaterialCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialCoefficient not implemented")
}
func (UnimplementedMondServiceServer) SpecialMaterialHazard(context.Context, *SpecialMaterialHazardRequest) (*SpecialMaterialHazardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecialMaterialHazard not implemented")
}
func (UnimplementedMondServiceServer) GeneralProcessHazard(context.Context, *GeneralProcessHazardRequest) (*GeneralProcessHazardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralProcessHazard not implemented")
}
func (UnimplementedMondServiceServer) SpecialProcessHazard(context.Context, *SpecialProcessHazardRequest) (*SpecialProcessHazardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecialProcessHazard not implemented")
}
func (UnimplementedMondServiceServer) ArrangementHazardCoefficient(context.Context, *ArrangementHazardCoefficientRequest) (*ArrangementHazardCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrangementHazardCoefficient not implemented")
}
func (UnimplementedMondServiceServer) NumHazardCoefficient(context.Context, *NumHazardCoefficientRequest) (*NumHazardCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumHazardCoefficient not implemented")
}
func (UnimplementedMondServiceServer) PoisonHazardCoefficient(context.Context, *PoisonHazardCoefficientRequest) (*PoisonHazardCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoisonHazardCoefficient not implemented")
}
func (UnimplementedMondServiceServer) PoisonHazardCoefficientGetTLVTypeExposure(context.Context, *PoisonHazardCoefficientGetTLVTypeExposureRequest) (*PoisonHazardCoefficientGetTLVTypeExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoisonHazardCoefficientGetTLVTypeExposure not implemented")
}
func (UnimplementedMondServiceServer) ContainerSystemCoefficient(context.Context, *ContainerSystemCoefficientRequest) (*ContainerSystemCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerSystemCoefficient not implemented")
}
func (UnimplementedMondServiceServer) ProcessManagementCoefficient(context.Context, *ProcessManagementCoefficientRequest) (*ProcessManagementCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessManagementCoefficient not implemented")
}
func (UnimplementedMondServiceServer) MaterialIsolationCoefficient(context.Context, *MaterialIsolationCoefficientRequest) (*MaterialIsolationCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialIsolationCoefficient not implemented")
}
func (UnimplementedMondServiceServer) SafetyAttitudeCoefficient(context.Context, *SafetyAttitudeCoefficientRequest) (*SafetyAttitudeCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafetyAttitudeCoefficient not implemented")
}
func (UnimplementedMondServiceServer) FirePreventionCoefficient(context.Context, *FirePreventionCoefficientRequest) (*FirePreventionCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirePreventionCoefficient not implemented")
}
func (UnimplementedMondServiceServer) FireFightingActivityCoefficient(context.Context, *FireFightingActivityCoefficientRequest) (*FireFightingActivityCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireFightingActivityCoefficient not implemented")
}
func (UnimplementedMondServiceServer) InitialCommentIndexFinialCompensationCoefficient(context.Context, *InitialCommentIndexFinialCompensationCoefficientRequest) (*InitialCommentIndexFinialCompensationCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialCommentIndexFinialCompensationCoefficient not implemented")
}
func (UnimplementedMondServiceServer) MaterialsGet(context.Context, *MaterialsGetRequest) (*MaterialsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialsGet not implemented")
}
func (UnimplementedMondServiceServer) MaterialEdit(context.Context, *MaterialEditRequest) (*MaterialEditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialEdit not implemented")
}
func (UnimplementedMondServiceServer) MaterialDelete(context.Context, *MaterialDeleteRequest) (*MaterialDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterialDelete not implemented")
}
func (UnimplementedMondServiceServer) mustEmbedUnimplementedMondServiceServer() {}

// UnsafeMondServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MondServiceServer will
// result in compilation errors.
type UnsafeMondServiceServer interface {
	mustEmbedUnimplementedMondServiceServer()
}

func RegisterMondServiceServer(s grpc.ServiceRegistrar, srv MondServiceServer) {
	s.RegisterService(&MondService_ServiceDesc, srv)
}

func _MondService_MaterialCoefficientSaveUnknownMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialCoefficientSaveUnknownMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialCoefficientSaveUnknownMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialCoefficientSaveUnknownMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialCoefficientSaveUnknownMaterial(ctx, req.(*MaterialCoefficientSaveUnknownMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialCoefficientGetKnownCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialCoefficientGetKnownCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialCoefficientGetKnownCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialCoefficientGetKnownCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialCoefficientGetKnownCoefficient(ctx, req.(*MaterialCoefficientGetKnownCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialCoefficientGetKnownNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialCoefficientGetKnownNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialCoefficientGetKnownNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialCoefficientGetKnownNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialCoefficientGetKnownNames(ctx, req.(*MaterialCoefficientGetKnownNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialCoefficient(ctx, req.(*MaterialCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_SpecialMaterialHazard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialMaterialHazardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).SpecialMaterialHazard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_SpecialMaterialHazard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).SpecialMaterialHazard(ctx, req.(*SpecialMaterialHazardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_GeneralProcessHazard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralProcessHazardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).GeneralProcessHazard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_GeneralProcessHazard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).GeneralProcessHazard(ctx, req.(*GeneralProcessHazardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_SpecialProcessHazard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialProcessHazardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).SpecialProcessHazard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_SpecialProcessHazard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).SpecialProcessHazard(ctx, req.(*SpecialProcessHazardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_ArrangementHazardCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrangementHazardCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).ArrangementHazardCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_ArrangementHazardCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).ArrangementHazardCoefficient(ctx, req.(*ArrangementHazardCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_NumHazardCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumHazardCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).NumHazardCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_NumHazardCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).NumHazardCoefficient(ctx, req.(*NumHazardCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_PoisonHazardCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoisonHazardCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).PoisonHazardCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_PoisonHazardCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).PoisonHazardCoefficient(ctx, req.(*PoisonHazardCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_PoisonHazardCoefficientGetTLVTypeExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoisonHazardCoefficientGetTLVTypeExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).PoisonHazardCoefficientGetTLVTypeExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_PoisonHazardCoefficientGetTLVTypeExposure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).PoisonHazardCoefficientGetTLVTypeExposure(ctx, req.(*PoisonHazardCoefficientGetTLVTypeExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_ContainerSystemCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerSystemCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).ContainerSystemCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_ContainerSystemCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).ContainerSystemCoefficient(ctx, req.(*ContainerSystemCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_ProcessManagementCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessManagementCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).ProcessManagementCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_ProcessManagementCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).ProcessManagementCoefficient(ctx, req.(*ProcessManagementCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialIsolationCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialIsolationCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialIsolationCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialIsolationCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialIsolationCoefficient(ctx, req.(*MaterialIsolationCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_SafetyAttitudeCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafetyAttitudeCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).SafetyAttitudeCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_SafetyAttitudeCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).SafetyAttitudeCoefficient(ctx, req.(*SafetyAttitudeCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_FirePreventionCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirePreventionCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).FirePreventionCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_FirePreventionCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).FirePreventionCoefficient(ctx, req.(*FirePreventionCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_FireFightingActivityCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireFightingActivityCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).FireFightingActivityCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_FireFightingActivityCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).FireFightingActivityCoefficient(ctx, req.(*FireFightingActivityCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_InitialCommentIndexFinialCompensationCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialCommentIndexFinialCompensationCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).InitialCommentIndexFinialCompensationCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_InitialCommentIndexFinialCompensationCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).InitialCommentIndexFinialCompensationCoefficient(ctx, req.(*InitialCommentIndexFinialCompensationCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialsGet(ctx, req.(*MaterialsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialEdit(ctx, req.(*MaterialEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MondService_MaterialDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondServiceServer).MaterialDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MondService_MaterialDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondServiceServer).MaterialDelete(ctx, req.(*MaterialDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MondService_ServiceDesc is the grpc.ServiceDesc for MondService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MondService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mond.MondService",
	HandlerType: (*MondServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MaterialCoefficientSaveUnknownMaterial",
			Handler:    _MondService_MaterialCoefficientSaveUnknownMaterial_Handler,
		},
		{
			MethodName: "MaterialCoefficientGetKnownCoefficient",
			Handler:    _MondService_MaterialCoefficientGetKnownCoefficient_Handler,
		},
		{
			MethodName: "MaterialCoefficientGetKnownNames",
			Handler:    _MondService_MaterialCoefficientGetKnownNames_Handler,
		},
		{
			MethodName: "MaterialCoefficient",
			Handler:    _MondService_MaterialCoefficient_Handler,
		},
		{
			MethodName: "SpecialMaterialHazard",
			Handler:    _MondService_SpecialMaterialHazard_Handler,
		},
		{
			MethodName: "GeneralProcessHazard",
			Handler:    _MondService_GeneralProcessHazard_Handler,
		},
		{
			MethodName: "SpecialProcessHazard",
			Handler:    _MondService_SpecialProcessHazard_Handler,
		},
		{
			MethodName: "ArrangementHazardCoefficient",
			Handler:    _MondService_ArrangementHazardCoefficient_Handler,
		},
		{
			MethodName: "NumHazardCoefficient",
			Handler:    _MondService_NumHazardCoefficient_Handler,
		},
		{
			MethodName: "PoisonHazardCoefficient",
			Handler:    _MondService_PoisonHazardCoefficient_Handler,
		},
		{
			MethodName: "PoisonHazardCoefficientGetTLVTypeExposure",
			Handler:    _MondService_PoisonHazardCoefficientGetTLVTypeExposure_Handler,
		},
		{
			MethodName: "ContainerSystemCoefficient",
			Handler:    _MondService_ContainerSystemCoefficient_Handler,
		},
		{
			MethodName: "ProcessManagementCoefficient",
			Handler:    _MondService_ProcessManagementCoefficient_Handler,
		},
		{
			MethodName: "MaterialIsolationCoefficient",
			Handler:    _MondService_MaterialIsolationCoefficient_Handler,
		},
		{
			MethodName: "SafetyAttitudeCoefficient",
			Handler:    _MondService_SafetyAttitudeCoefficient_Handler,
		},
		{
			MethodName: "FirePreventionCoefficient",
			Handler:    _MondService_FirePreventionCoefficient_Handler,
		},
		{
			MethodName: "FireFightingActivityCoefficient",
			Handler:    _MondService_FireFightingActivityCoefficient_Handler,
		},
		{
			MethodName: "InitialCommentIndexFinialCompensationCoefficient",
			Handler:    _MondService_InitialCommentIndexFinialCompensationCoefficient_Handler,
		},
		{
			MethodName: "MaterialsGet",
			Handler:    _MondService_MaterialsGet_Handler,
		},
		{
			MethodName: "MaterialEdit",
			Handler:    _MondService_MaterialEdit_Handler,
		},
		{
			MethodName: "MaterialDelete",
			Handler:    _MondService_MaterialDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mond.proto",
}
