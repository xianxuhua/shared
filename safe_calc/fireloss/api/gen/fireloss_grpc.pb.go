// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: fireloss.proto

package firelosspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FireLossService_FireGrowthCoefficient_FullMethodName = "/fireloss.FireLossService/FireGrowthCoefficient"
	FireLossService_FireGrowthCategory_FullMethodName    = "/fireloss.FireLossService/FireGrowthCategory"
	FireLossService_StageOne_FullMethodName              = "/fireloss.FireLossService/StageOne"
	FireLossService_StageTwo_FullMethodName              = "/fireloss.FireLossService/StageTwo"
	FireLossService_StageThree_FullMethodName            = "/fireloss.FireLossService/StageThree"
	FireLossService_StageFour_FullMethodName             = "/fireloss.FireLossService/StageFour"
	FireLossService_BurntArea_FullMethodName             = "/fireloss.FireLossService/BurntArea"
)

// FireLossServiceClient is the client API for FireLossService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FireLossServiceClient interface {
	// 计算火灾成长系数
	FireGrowthCoefficient(ctx context.Context, in *FireGrowthCoefficientRequest, opts ...grpc.CallOption) (*FireGrowthCoefficientResponse, error)
	// 获取火灾成长系数类别
	FireGrowthCategory(ctx context.Context, in *FireGrowthCategoryRequest, opts ...grpc.CallOption) (*FireGrowthCategoryResponse, error)
	// 阶段1的计算
	StageOne(ctx context.Context, in *StageOneRequest, opts ...grpc.CallOption) (*StageOneResponse, error)
	// 阶段2的计算
	StageTwo(ctx context.Context, in *StageTwoRequest, opts ...grpc.CallOption) (*StageTwoResponse, error)
	// 阶段3的计算
	StageThree(ctx context.Context, in *StageThreeRequest, opts ...grpc.CallOption) (*StageThreeResponse, error)
	// 阶段4的计算
	StageFour(ctx context.Context, in *StageFourRequest, opts ...grpc.CallOption) (*StageFourResponse, error)
	// 烧损面积
	BurntArea(ctx context.Context, in *BurntAreaRequest, opts ...grpc.CallOption) (*BurntAreaResponse, error)
}

type fireLossServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFireLossServiceClient(cc grpc.ClientConnInterface) FireLossServiceClient {
	return &fireLossServiceClient{cc}
}

func (c *fireLossServiceClient) FireGrowthCoefficient(ctx context.Context, in *FireGrowthCoefficientRequest, opts ...grpc.CallOption) (*FireGrowthCoefficientResponse, error) {
	out := new(FireGrowthCoefficientResponse)
	err := c.cc.Invoke(ctx, FireLossService_FireGrowthCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireLossServiceClient) FireGrowthCategory(ctx context.Context, in *FireGrowthCategoryRequest, opts ...grpc.CallOption) (*FireGrowthCategoryResponse, error) {
	out := new(FireGrowthCategoryResponse)
	err := c.cc.Invoke(ctx, FireLossService_FireGrowthCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireLossServiceClient) StageOne(ctx context.Context, in *StageOneRequest, opts ...grpc.CallOption) (*StageOneResponse, error) {
	out := new(StageOneResponse)
	err := c.cc.Invoke(ctx, FireLossService_StageOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireLossServiceClient) StageTwo(ctx context.Context, in *StageTwoRequest, opts ...grpc.CallOption) (*StageTwoResponse, error) {
	out := new(StageTwoResponse)
	err := c.cc.Invoke(ctx, FireLossService_StageTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireLossServiceClient) StageThree(ctx context.Context, in *StageThreeRequest, opts ...grpc.CallOption) (*StageThreeResponse, error) {
	out := new(StageThreeResponse)
	err := c.cc.Invoke(ctx, FireLossService_StageThree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireLossServiceClient) StageFour(ctx context.Context, in *StageFourRequest, opts ...grpc.CallOption) (*StageFourResponse, error) {
	out := new(StageFourResponse)
	err := c.cc.Invoke(ctx, FireLossService_StageFour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireLossServiceClient) BurntArea(ctx context.Context, in *BurntAreaRequest, opts ...grpc.CallOption) (*BurntAreaResponse, error) {
	out := new(BurntAreaResponse)
	err := c.cc.Invoke(ctx, FireLossService_BurntArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FireLossServiceServer is the server API for FireLossService service.
// All implementations must embed UnimplementedFireLossServiceServer
// for forward compatibility
type FireLossServiceServer interface {
	// 计算火灾成长系数
	FireGrowthCoefficient(context.Context, *FireGrowthCoefficientRequest) (*FireGrowthCoefficientResponse, error)
	// 获取火灾成长系数类别
	FireGrowthCategory(context.Context, *FireGrowthCategoryRequest) (*FireGrowthCategoryResponse, error)
	// 阶段1的计算
	StageOne(context.Context, *StageOneRequest) (*StageOneResponse, error)
	// 阶段2的计算
	StageTwo(context.Context, *StageTwoRequest) (*StageTwoResponse, error)
	// 阶段3的计算
	StageThree(context.Context, *StageThreeRequest) (*StageThreeResponse, error)
	// 阶段4的计算
	StageFour(context.Context, *StageFourRequest) (*StageFourResponse, error)
	// 烧损面积
	BurntArea(context.Context, *BurntAreaRequest) (*BurntAreaResponse, error)
	mustEmbedUnimplementedFireLossServiceServer()
}

// UnimplementedFireLossServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFireLossServiceServer struct {
}

func (UnimplementedFireLossServiceServer) FireGrowthCoefficient(context.Context, *FireGrowthCoefficientRequest) (*FireGrowthCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireGrowthCoefficient not implemented")
}
func (UnimplementedFireLossServiceServer) FireGrowthCategory(context.Context, *FireGrowthCategoryRequest) (*FireGrowthCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireGrowthCategory not implemented")
}
func (UnimplementedFireLossServiceServer) StageOne(context.Context, *StageOneRequest) (*StageOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageOne not implemented")
}
func (UnimplementedFireLossServiceServer) StageTwo(context.Context, *StageTwoRequest) (*StageTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageTwo not implemented")
}
func (UnimplementedFireLossServiceServer) StageThree(context.Context, *StageThreeRequest) (*StageThreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageThree not implemented")
}
func (UnimplementedFireLossServiceServer) StageFour(context.Context, *StageFourRequest) (*StageFourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageFour not implemented")
}
func (UnimplementedFireLossServiceServer) BurntArea(context.Context, *BurntAreaRequest) (*BurntAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurntArea not implemented")
}
func (UnimplementedFireLossServiceServer) mustEmbedUnimplementedFireLossServiceServer() {}

// UnsafeFireLossServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FireLossServiceServer will
// result in compilation errors.
type UnsafeFireLossServiceServer interface {
	mustEmbedUnimplementedFireLossServiceServer()
}

func RegisterFireLossServiceServer(s grpc.ServiceRegistrar, srv FireLossServiceServer) {
	s.RegisterService(&FireLossService_ServiceDesc, srv)
}

func _FireLossService_FireGrowthCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireGrowthCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).FireGrowthCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_FireGrowthCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).FireGrowthCoefficient(ctx, req.(*FireGrowthCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FireLossService_FireGrowthCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireGrowthCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).FireGrowthCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_FireGrowthCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).FireGrowthCategory(ctx, req.(*FireGrowthCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FireLossService_StageOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).StageOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_StageOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).StageOne(ctx, req.(*StageOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FireLossService_StageTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).StageTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_StageTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).StageTwo(ctx, req.(*StageTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FireLossService_StageThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageThreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).StageThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_StageThree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).StageThree(ctx, req.(*StageThreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FireLossService_StageFour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageFourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).StageFour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_StageFour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).StageFour(ctx, req.(*StageFourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FireLossService_BurntArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurntAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireLossServiceServer).BurntArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FireLossService_BurntArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireLossServiceServer).BurntArea(ctx, req.(*BurntAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FireLossService_ServiceDesc is the grpc.ServiceDesc for FireLossService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FireLossService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fireloss.FireLossService",
	HandlerType: (*FireLossServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireGrowthCoefficient",
			Handler:    _FireLossService_FireGrowthCoefficient_Handler,
		},
		{
			MethodName: "FireGrowthCategory",
			Handler:    _FireLossService_FireGrowthCategory_Handler,
		},
		{
			MethodName: "StageOne",
			Handler:    _FireLossService_StageOne_Handler,
		},
		{
			MethodName: "StageTwo",
			Handler:    _FireLossService_StageTwo_Handler,
		},
		{
			MethodName: "StageThree",
			Handler:    _FireLossService_StageThree_Handler,
		},
		{
			MethodName: "StageFour",
			Handler:    _FireLossService_StageFour_Handler,
		},
		{
			MethodName: "BurntArea",
			Handler:    _FireLossService_BurntArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fireloss.proto",
}
