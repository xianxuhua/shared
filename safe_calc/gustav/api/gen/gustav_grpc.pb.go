// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gustav.proto

package gustavpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GustavService_FireBuildingRiskAnalyse_FullMethodName                             = "/gustav.GustavService/FireBuildingRiskAnalyse"
	GustavService_FireBuildingRiskAnalyseGetCombustibleNames_FullMethodName          = "/gustav.GustavService/FireBuildingRiskAnalyseGetCombustibleNames"
	GustavService_FireBuildingRiskAnalyseGetFireResistTops_FullMethodName            = "/gustav.GustavService/FireBuildingRiskAnalyseGetFireResistTops"
	GustavService_FireBuildingRiskAnalyseGetFireSourceFeature_FullMethodName         = "/gustav.GustavService/FireBuildingRiskAnalyseGetFireSourceFeature"
	GustavService_FireBuildingRiskAnalyseGetFireFightPowerPropertyDis_FullMethodName = "/gustav.GustavService/FireBuildingRiskAnalyseGetFireFightPowerPropertyDis"
	GustavService_QiGet_FullMethodName                                               = "/gustav.GustavService/QiGet"
	GustavService_BuildingFireRiskAnalyse_FullMethodName                             = "/gustav.GustavService/BuildingFireRiskAnalyse"
	GustavService_BuildingFireRiskAnalyseGetPersonRiskFeature_FullMethodName         = "/gustav.GustavService/BuildingFireRiskAnalyseGetPersonRiskFeature"
	GustavService_BuildingFireRiskAnalyseGetAssetsRiskFeature_FullMethodName         = "/gustav.GustavService/BuildingFireRiskAnalyseGetAssetsRiskFeature"
	GustavService_BuildingFireRiskAnalyseGetSmokeRiskFeature_FullMethodName          = "/gustav.GustavService/BuildingFireRiskAnalyseGetSmokeRiskFeature"
	GustavService_BuildingFireRiskTotalAnalyse_FullMethodName                        = "/gustav.GustavService/BuildingFireRiskTotalAnalyse"
	GustavService_BuildingFireRiskTotalAnalyseSavePoint_FullMethodName               = "/gustav.GustavService/BuildingFireRiskTotalAnalyseSavePoint"
	GustavService_BuildingFireRiskTotalAnalyseGetPoint_FullMethodName                = "/gustav.GustavService/BuildingFireRiskTotalAnalyseGetPoint"
)

// GustavServiceClient is the client API for GustavService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GustavServiceClient interface {
	// 火灾建筑物危险度GR分析
	FireBuildingRiskAnalyse(ctx context.Context, in *FireBuildingRiskAnalyseRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseResponse, error)
	// 可燃物名称
	FireBuildingRiskAnalyseGetCombustibleNames(ctx context.Context, in *FireBuildingRiskAnalyseGetCombustibleNamesRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetCombustibleNamesResponse, error)
	// 耐火极限
	FireBuildingRiskAnalyseGetFireResistTops(ctx context.Context, in *FireBuildingRiskAnalyseGetFireResistTopsRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetFireResistTopsResponse, error)
	// 点火源特征
	FireBuildingRiskAnalyseGetFireSourceFeature(ctx context.Context, in *FireBuildingRiskAnalyseGetFireSourceFeatureRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetFireSourceFeatureResponse, error)
	// 灭火力量性质, 与消防力量直线距离
	FireBuildingRiskAnalyseGetFireFightPowerPropertyDis(ctx context.Context, in *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse, error)
	// 固定火灾载荷因子
	QiGet(ctx context.Context, in *QiGetRequest, opts ...grpc.CallOption) (*QiGetResponse, error)
	// 建筑物内火灾危险度IR分析
	BuildingFireRiskAnalyse(ctx context.Context, in *BuildingFireRiskAnalyseRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseResponse, error)
	// 人员的火灾危险特性
	BuildingFireRiskAnalyseGetPersonRiskFeature(ctx context.Context, in *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse, error)
	// 财产的火灾危险性特征
	BuildingFireRiskAnalyseGetAssetsRiskFeature(ctx context.Context, in *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse, error)
	// 烟气的火灾危险性特征
	BuildingFireRiskAnalyseGetSmokeRiskFeature(ctx context.Context, in *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse, error)
	// 建筑物火灾危险度综合分析
	BuildingFireRiskTotalAnalyse(ctx context.Context, in *BuildingFireRiskTotalAnalyseRequest, opts ...grpc.CallOption) (*BuildingFireRiskTotalAnalyseResponse, error)
	// 存储绘制的区域
	BuildingFireRiskTotalAnalyseSavePoint(ctx context.Context, in *BuildingFireRiskTotalAnalyseSavePointRequest, opts ...grpc.CallOption) (*BuildingFireRiskTotalAnalyseSavePointResponse, error)
	// 获取所有绘制区域
	BuildingFireRiskTotalAnalyseGetPoint(ctx context.Context, in *BuildingFireRiskTotalAnalyseGetPointRequest, opts ...grpc.CallOption) (*BuildingFireRiskTotalAnalyseGetPointResponse, error)
}

type gustavServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGustavServiceClient(cc grpc.ClientConnInterface) GustavServiceClient {
	return &gustavServiceClient{cc}
}

func (c *gustavServiceClient) FireBuildingRiskAnalyse(ctx context.Context, in *FireBuildingRiskAnalyseRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseResponse, error) {
	out := new(FireBuildingRiskAnalyseResponse)
	err := c.cc.Invoke(ctx, GustavService_FireBuildingRiskAnalyse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) FireBuildingRiskAnalyseGetCombustibleNames(ctx context.Context, in *FireBuildingRiskAnalyseGetCombustibleNamesRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetCombustibleNamesResponse, error) {
	out := new(FireBuildingRiskAnalyseGetCombustibleNamesResponse)
	err := c.cc.Invoke(ctx, GustavService_FireBuildingRiskAnalyseGetCombustibleNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) FireBuildingRiskAnalyseGetFireResistTops(ctx context.Context, in *FireBuildingRiskAnalyseGetFireResistTopsRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetFireResistTopsResponse, error) {
	out := new(FireBuildingRiskAnalyseGetFireResistTopsResponse)
	err := c.cc.Invoke(ctx, GustavService_FireBuildingRiskAnalyseGetFireResistTops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) FireBuildingRiskAnalyseGetFireSourceFeature(ctx context.Context, in *FireBuildingRiskAnalyseGetFireSourceFeatureRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetFireSourceFeatureResponse, error) {
	out := new(FireBuildingRiskAnalyseGetFireSourceFeatureResponse)
	err := c.cc.Invoke(ctx, GustavService_FireBuildingRiskAnalyseGetFireSourceFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) FireBuildingRiskAnalyseGetFireFightPowerPropertyDis(ctx context.Context, in *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest, opts ...grpc.CallOption) (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse, error) {
	out := new(FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse)
	err := c.cc.Invoke(ctx, GustavService_FireBuildingRiskAnalyseGetFireFightPowerPropertyDis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) QiGet(ctx context.Context, in *QiGetRequest, opts ...grpc.CallOption) (*QiGetResponse, error) {
	out := new(QiGetResponse)
	err := c.cc.Invoke(ctx, GustavService_QiGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskAnalyse(ctx context.Context, in *BuildingFireRiskAnalyseRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseResponse, error) {
	out := new(BuildingFireRiskAnalyseResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskAnalyse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskAnalyseGetPersonRiskFeature(ctx context.Context, in *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse, error) {
	out := new(BuildingFireRiskAnalyseGetPersonRiskFeatureResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskAnalyseGetPersonRiskFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskAnalyseGetAssetsRiskFeature(ctx context.Context, in *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse, error) {
	out := new(BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskAnalyseGetAssetsRiskFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskAnalyseGetSmokeRiskFeature(ctx context.Context, in *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest, opts ...grpc.CallOption) (*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse, error) {
	out := new(BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskAnalyseGetSmokeRiskFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskTotalAnalyse(ctx context.Context, in *BuildingFireRiskTotalAnalyseRequest, opts ...grpc.CallOption) (*BuildingFireRiskTotalAnalyseResponse, error) {
	out := new(BuildingFireRiskTotalAnalyseResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskTotalAnalyse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskTotalAnalyseSavePoint(ctx context.Context, in *BuildingFireRiskTotalAnalyseSavePointRequest, opts ...grpc.CallOption) (*BuildingFireRiskTotalAnalyseSavePointResponse, error) {
	out := new(BuildingFireRiskTotalAnalyseSavePointResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskTotalAnalyseSavePoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gustavServiceClient) BuildingFireRiskTotalAnalyseGetPoint(ctx context.Context, in *BuildingFireRiskTotalAnalyseGetPointRequest, opts ...grpc.CallOption) (*BuildingFireRiskTotalAnalyseGetPointResponse, error) {
	out := new(BuildingFireRiskTotalAnalyseGetPointResponse)
	err := c.cc.Invoke(ctx, GustavService_BuildingFireRiskTotalAnalyseGetPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GustavServiceServer is the server API for GustavService service.
// All implementations must embed UnimplementedGustavServiceServer
// for forward compatibility
type GustavServiceServer interface {
	// 火灾建筑物危险度GR分析
	FireBuildingRiskAnalyse(context.Context, *FireBuildingRiskAnalyseRequest) (*FireBuildingRiskAnalyseResponse, error)
	// 可燃物名称
	FireBuildingRiskAnalyseGetCombustibleNames(context.Context, *FireBuildingRiskAnalyseGetCombustibleNamesRequest) (*FireBuildingRiskAnalyseGetCombustibleNamesResponse, error)
	// 耐火极限
	FireBuildingRiskAnalyseGetFireResistTops(context.Context, *FireBuildingRiskAnalyseGetFireResistTopsRequest) (*FireBuildingRiskAnalyseGetFireResistTopsResponse, error)
	// 点火源特征
	FireBuildingRiskAnalyseGetFireSourceFeature(context.Context, *FireBuildingRiskAnalyseGetFireSourceFeatureRequest) (*FireBuildingRiskAnalyseGetFireSourceFeatureResponse, error)
	// 灭火力量性质, 与消防力量直线距离
	FireBuildingRiskAnalyseGetFireFightPowerPropertyDis(context.Context, *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse, error)
	// 固定火灾载荷因子
	QiGet(context.Context, *QiGetRequest) (*QiGetResponse, error)
	// 建筑物内火灾危险度IR分析
	BuildingFireRiskAnalyse(context.Context, *BuildingFireRiskAnalyseRequest) (*BuildingFireRiskAnalyseResponse, error)
	// 人员的火灾危险特性
	BuildingFireRiskAnalyseGetPersonRiskFeature(context.Context, *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) (*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse, error)
	// 财产的火灾危险性特征
	BuildingFireRiskAnalyseGetAssetsRiskFeature(context.Context, *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) (*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse, error)
	// 烟气的火灾危险性特征
	BuildingFireRiskAnalyseGetSmokeRiskFeature(context.Context, *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) (*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse, error)
	// 建筑物火灾危险度综合分析
	BuildingFireRiskTotalAnalyse(context.Context, *BuildingFireRiskTotalAnalyseRequest) (*BuildingFireRiskTotalAnalyseResponse, error)
	// 存储绘制的区域
	BuildingFireRiskTotalAnalyseSavePoint(context.Context, *BuildingFireRiskTotalAnalyseSavePointRequest) (*BuildingFireRiskTotalAnalyseSavePointResponse, error)
	// 获取所有绘制区域
	BuildingFireRiskTotalAnalyseGetPoint(context.Context, *BuildingFireRiskTotalAnalyseGetPointRequest) (*BuildingFireRiskTotalAnalyseGetPointResponse, error)
	mustEmbedUnimplementedGustavServiceServer()
}

// UnimplementedGustavServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGustavServiceServer struct {
}

func (UnimplementedGustavServiceServer) FireBuildingRiskAnalyse(context.Context, *FireBuildingRiskAnalyseRequest) (*FireBuildingRiskAnalyseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireBuildingRiskAnalyse not implemented")
}
func (UnimplementedGustavServiceServer) FireBuildingRiskAnalyseGetCombustibleNames(context.Context, *FireBuildingRiskAnalyseGetCombustibleNamesRequest) (*FireBuildingRiskAnalyseGetCombustibleNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireBuildingRiskAnalyseGetCombustibleNames not implemented")
}
func (UnimplementedGustavServiceServer) FireBuildingRiskAnalyseGetFireResistTops(context.Context, *FireBuildingRiskAnalyseGetFireResistTopsRequest) (*FireBuildingRiskAnalyseGetFireResistTopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireBuildingRiskAnalyseGetFireResistTops not implemented")
}
func (UnimplementedGustavServiceServer) FireBuildingRiskAnalyseGetFireSourceFeature(context.Context, *FireBuildingRiskAnalyseGetFireSourceFeatureRequest) (*FireBuildingRiskAnalyseGetFireSourceFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireBuildingRiskAnalyseGetFireSourceFeature not implemented")
}
func (UnimplementedGustavServiceServer) FireBuildingRiskAnalyseGetFireFightPowerPropertyDis(context.Context, *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireBuildingRiskAnalyseGetFireFightPowerPropertyDis not implemented")
}
func (UnimplementedGustavServiceServer) QiGet(context.Context, *QiGetRequest) (*QiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QiGet not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskAnalyse(context.Context, *BuildingFireRiskAnalyseRequest) (*BuildingFireRiskAnalyseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskAnalyse not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskAnalyseGetPersonRiskFeature(context.Context, *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) (*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskAnalyseGetPersonRiskFeature not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskAnalyseGetAssetsRiskFeature(context.Context, *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) (*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskAnalyseGetAssetsRiskFeature not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskAnalyseGetSmokeRiskFeature(context.Context, *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) (*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskAnalyseGetSmokeRiskFeature not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskTotalAnalyse(context.Context, *BuildingFireRiskTotalAnalyseRequest) (*BuildingFireRiskTotalAnalyseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskTotalAnalyse not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskTotalAnalyseSavePoint(context.Context, *BuildingFireRiskTotalAnalyseSavePointRequest) (*BuildingFireRiskTotalAnalyseSavePointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskTotalAnalyseSavePoint not implemented")
}
func (UnimplementedGustavServiceServer) BuildingFireRiskTotalAnalyseGetPoint(context.Context, *BuildingFireRiskTotalAnalyseGetPointRequest) (*BuildingFireRiskTotalAnalyseGetPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildingFireRiskTotalAnalyseGetPoint not implemented")
}
func (UnimplementedGustavServiceServer) mustEmbedUnimplementedGustavServiceServer() {}

// UnsafeGustavServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GustavServiceServer will
// result in compilation errors.
type UnsafeGustavServiceServer interface {
	mustEmbedUnimplementedGustavServiceServer()
}

func RegisterGustavServiceServer(s grpc.ServiceRegistrar, srv GustavServiceServer) {
	s.RegisterService(&GustavService_ServiceDesc, srv)
}

func _GustavService_FireBuildingRiskAnalyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireBuildingRiskAnalyseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_FireBuildingRiskAnalyse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyse(ctx, req.(*FireBuildingRiskAnalyseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_FireBuildingRiskAnalyseGetCombustibleNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireBuildingRiskAnalyseGetCombustibleNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetCombustibleNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_FireBuildingRiskAnalyseGetCombustibleNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetCombustibleNames(ctx, req.(*FireBuildingRiskAnalyseGetCombustibleNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_FireBuildingRiskAnalyseGetFireResistTops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireBuildingRiskAnalyseGetFireResistTopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetFireResistTops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_FireBuildingRiskAnalyseGetFireResistTops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetFireResistTops(ctx, req.(*FireBuildingRiskAnalyseGetFireResistTopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_FireBuildingRiskAnalyseGetFireSourceFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireBuildingRiskAnalyseGetFireSourceFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetFireSourceFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_FireBuildingRiskAnalyseGetFireSourceFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetFireSourceFeature(ctx, req.(*FireBuildingRiskAnalyseGetFireSourceFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_FireBuildingRiskAnalyseGetFireFightPowerPropertyDis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetFireFightPowerPropertyDis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_FireBuildingRiskAnalyseGetFireFightPowerPropertyDis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).FireBuildingRiskAnalyseGetFireFightPowerPropertyDis(ctx, req.(*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_QiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).QiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_QiGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).QiGet(ctx, req.(*QiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskAnalyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskAnalyseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskAnalyse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyse(ctx, req.(*BuildingFireRiskAnalyseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskAnalyseGetPersonRiskFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskAnalyseGetPersonRiskFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyseGetPersonRiskFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskAnalyseGetPersonRiskFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyseGetPersonRiskFeature(ctx, req.(*BuildingFireRiskAnalyseGetPersonRiskFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskAnalyseGetAssetsRiskFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyseGetAssetsRiskFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskAnalyseGetAssetsRiskFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyseGetAssetsRiskFeature(ctx, req.(*BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskAnalyseGetSmokeRiskFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyseGetSmokeRiskFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskAnalyseGetSmokeRiskFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskAnalyseGetSmokeRiskFeature(ctx, req.(*BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskTotalAnalyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskTotalAnalyseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskTotalAnalyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskTotalAnalyse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskTotalAnalyse(ctx, req.(*BuildingFireRiskTotalAnalyseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskTotalAnalyseSavePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskTotalAnalyseSavePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskTotalAnalyseSavePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskTotalAnalyseSavePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskTotalAnalyseSavePoint(ctx, req.(*BuildingFireRiskTotalAnalyseSavePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GustavService_BuildingFireRiskTotalAnalyseGetPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingFireRiskTotalAnalyseGetPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GustavServiceServer).BuildingFireRiskTotalAnalyseGetPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GustavService_BuildingFireRiskTotalAnalyseGetPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GustavServiceServer).BuildingFireRiskTotalAnalyseGetPoint(ctx, req.(*BuildingFireRiskTotalAnalyseGetPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GustavService_ServiceDesc is the grpc.ServiceDesc for GustavService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GustavService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gustav.GustavService",
	HandlerType: (*GustavServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireBuildingRiskAnalyse",
			Handler:    _GustavService_FireBuildingRiskAnalyse_Handler,
		},
		{
			MethodName: "FireBuildingRiskAnalyseGetCombustibleNames",
			Handler:    _GustavService_FireBuildingRiskAnalyseGetCombustibleNames_Handler,
		},
		{
			MethodName: "FireBuildingRiskAnalyseGetFireResistTops",
			Handler:    _GustavService_FireBuildingRiskAnalyseGetFireResistTops_Handler,
		},
		{
			MethodName: "FireBuildingRiskAnalyseGetFireSourceFeature",
			Handler:    _GustavService_FireBuildingRiskAnalyseGetFireSourceFeature_Handler,
		},
		{
			MethodName: "FireBuildingRiskAnalyseGetFireFightPowerPropertyDis",
			Handler:    _GustavService_FireBuildingRiskAnalyseGetFireFightPowerPropertyDis_Handler,
		},
		{
			MethodName: "QiGet",
			Handler:    _GustavService_QiGet_Handler,
		},
		{
			MethodName: "BuildingFireRiskAnalyse",
			Handler:    _GustavService_BuildingFireRiskAnalyse_Handler,
		},
		{
			MethodName: "BuildingFireRiskAnalyseGetPersonRiskFeature",
			Handler:    _GustavService_BuildingFireRiskAnalyseGetPersonRiskFeature_Handler,
		},
		{
			MethodName: "BuildingFireRiskAnalyseGetAssetsRiskFeature",
			Handler:    _GustavService_BuildingFireRiskAnalyseGetAssetsRiskFeature_Handler,
		},
		{
			MethodName: "BuildingFireRiskAnalyseGetSmokeRiskFeature",
			Handler:    _GustavService_BuildingFireRiskAnalyseGetSmokeRiskFeature_Handler,
		},
		{
			MethodName: "BuildingFireRiskTotalAnalyse",
			Handler:    _GustavService_BuildingFireRiskTotalAnalyse_Handler,
		},
		{
			MethodName: "BuildingFireRiskTotalAnalyseSavePoint",
			Handler:    _GustavService_BuildingFireRiskTotalAnalyseSavePoint_Handler,
		},
		{
			MethodName: "BuildingFireRiskTotalAnalyseGetPoint",
			Handler:    _GustavService_BuildingFireRiskTotalAnalyseGetPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gustav.proto",
}
