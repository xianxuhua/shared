// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: gustav.proto

package gustavpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FireBuildingRiskAnalyseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoveFireType           string  `protobuf:"bytes,1,opt,name=move_fire_type,json=moveFireType,proto3" json:"move_fire_type,omitempty"`
	MoveFireQuality        float32 `protobuf:"fixed32,2,opt,name=move_fire_quality,json=moveFireQuality,proto3" json:"move_fire_quality,omitempty"`
	AccessArea             float32 `protobuf:"fixed32,3,opt,name=access_area,json=accessArea,proto3" json:"access_area,omitempty"`
	FireResistTop          string  `protobuf:"bytes,4,opt,name=fire_resist_top,json=fireResistTop,proto3" json:"fire_resist_top,omitempty"`
	FireSourceFeature      string  `protobuf:"bytes,5,opt,name=fire_source_feature,json=fireSourceFeature,proto3" json:"fire_source_feature,omitempty"`
	FireFightPowerProperty string  `protobuf:"bytes,6,opt,name=fire_fight_power_property,json=fireFightPowerProperty,proto3" json:"fire_fight_power_property,omitempty"`
	FireControlDis         string  `protobuf:"bytes,7,opt,name=fire_control_dis,json=fireControlDis,proto3" json:"fire_control_dis,omitempty"`
	Qi                     float32 `protobuf:"fixed32,8,opt,name=Qi,proto3" json:"Qi,omitempty"`
}

func (x *FireBuildingRiskAnalyseRequest) Reset() {
	*x = FireBuildingRiskAnalyseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseRequest) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseRequest.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{0}
}

func (x *FireBuildingRiskAnalyseRequest) GetMoveFireType() string {
	if x != nil {
		return x.MoveFireType
	}
	return ""
}

func (x *FireBuildingRiskAnalyseRequest) GetMoveFireQuality() float32 {
	if x != nil {
		return x.MoveFireQuality
	}
	return 0
}

func (x *FireBuildingRiskAnalyseRequest) GetAccessArea() float32 {
	if x != nil {
		return x.AccessArea
	}
	return 0
}

func (x *FireBuildingRiskAnalyseRequest) GetFireResistTop() string {
	if x != nil {
		return x.FireResistTop
	}
	return ""
}

func (x *FireBuildingRiskAnalyseRequest) GetFireSourceFeature() string {
	if x != nil {
		return x.FireSourceFeature
	}
	return ""
}

func (x *FireBuildingRiskAnalyseRequest) GetFireFightPowerProperty() string {
	if x != nil {
		return x.FireFightPowerProperty
	}
	return ""
}

func (x *FireBuildingRiskAnalyseRequest) GetFireControlDis() string {
	if x != nil {
		return x.FireControlDis
	}
	return ""
}

func (x *FireBuildingRiskAnalyseRequest) GetQi() float32 {
	if x != nil {
		return x.Qi
	}
	return 0
}

// 变量不能用大写
type FireBuildingRiskAnalyseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoveFireLoadFactorQm      float32 `protobuf:"fixed32,1,opt,name=move_fire_load_factor_qm,json=moveFireLoadFactorQm,proto3" json:"move_fire_load_factor_qm,omitempty"`
	FireFightDelayFactorL     float32 `protobuf:"fixed32,2,opt,name=fire_fight_delay_factor_l,json=fireFightDelayFactorL,proto3" json:"fire_fight_delay_factor_l,omitempty"`
	BurningPerformFactorC     float32 `protobuf:"fixed32,3,opt,name=burning_perform_factor_c,json=burningPerformFactorC,proto3" json:"burning_perform_factor_c,omitempty"`
	BuildingFireResistFactorW float32 `protobuf:"fixed32,4,opt,name=building_fire_resist_factor_w,json=buildingFireResistFactorW,proto3" json:"building_fire_resist_factor_w,omitempty"`
	FireAreaPositionFactorB   float32 `protobuf:"fixed32,5,opt,name=fire_area_position_factor_b,json=fireAreaPositionFactorB,proto3" json:"fire_area_position_factor_b,omitempty"`
	RiskReduceFactorRi        float32 `protobuf:"fixed32,6,opt,name=risk_reduce_factor_ri,json=riskReduceFactorRi,proto3" json:"risk_reduce_factor_ri,omitempty"`
	BuildingRiskGr            float32 `protobuf:"fixed32,7,opt,name=building_risk_gr,json=buildingRiskGr,proto3" json:"building_risk_gr,omitempty"`
}

func (x *FireBuildingRiskAnalyseResponse) Reset() {
	*x = FireBuildingRiskAnalyseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseResponse) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseResponse.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{1}
}

func (x *FireBuildingRiskAnalyseResponse) GetMoveFireLoadFactorQm() float32 {
	if x != nil {
		return x.MoveFireLoadFactorQm
	}
	return 0
}

func (x *FireBuildingRiskAnalyseResponse) GetFireFightDelayFactorL() float32 {
	if x != nil {
		return x.FireFightDelayFactorL
	}
	return 0
}

func (x *FireBuildingRiskAnalyseResponse) GetBurningPerformFactorC() float32 {
	if x != nil {
		return x.BurningPerformFactorC
	}
	return 0
}

func (x *FireBuildingRiskAnalyseResponse) GetBuildingFireResistFactorW() float32 {
	if x != nil {
		return x.BuildingFireResistFactorW
	}
	return 0
}

func (x *FireBuildingRiskAnalyseResponse) GetFireAreaPositionFactorB() float32 {
	if x != nil {
		return x.FireAreaPositionFactorB
	}
	return 0
}

func (x *FireBuildingRiskAnalyseResponse) GetRiskReduceFactorRi() float32 {
	if x != nil {
		return x.RiskReduceFactorRi
	}
	return 0
}

func (x *FireBuildingRiskAnalyseResponse) GetBuildingRiskGr() float32 {
	if x != nil {
		return x.BuildingRiskGr
	}
	return 0
}

type Combustible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Combustible) Reset() {
	*x = Combustible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Combustible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Combustible) ProtoMessage() {}

func (x *Combustible) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Combustible.ProtoReflect.Descriptor instead.
func (*Combustible) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{2}
}

func (x *Combustible) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Combustible) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type FireBuildingRiskAnalyseGetCombustibleNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesRequest) Reset() {
	*x = FireBuildingRiskAnalyseGetCombustibleNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetCombustibleNamesRequest) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetCombustibleNamesRequest.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetCombustibleNamesRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{3}
}

type FireBuildingRiskAnalyseGetCombustibleNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombustibleNames []*Combustible `protobuf:"bytes,1,rep,name=combustible_names,json=combustibleNames,proto3" json:"combustible_names,omitempty"`
}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesResponse) Reset() {
	*x = FireBuildingRiskAnalyseGetCombustibleNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetCombustibleNamesResponse) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetCombustibleNamesResponse.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetCombustibleNamesResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{4}
}

func (x *FireBuildingRiskAnalyseGetCombustibleNamesResponse) GetCombustibleNames() []*Combustible {
	if x != nil {
		return x.CombustibleNames
	}
	return nil
}

type FireResist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *FireResist) Reset() {
	*x = FireResist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireResist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireResist) ProtoMessage() {}

func (x *FireResist) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireResist.ProtoReflect.Descriptor instead.
func (*FireResist) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{5}
}

func (x *FireResist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FireResist) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type FireBuildingRiskAnalyseGetFireResistTopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FireBuildingRiskAnalyseGetFireResistTopsRequest) Reset() {
	*x = FireBuildingRiskAnalyseGetFireResistTopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetFireResistTopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetFireResistTopsRequest) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetFireResistTopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetFireResistTopsRequest.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetFireResistTopsRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{6}
}

type FireBuildingRiskAnalyseGetFireResistTopsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireResistTops []*FireResist `protobuf:"bytes,1,rep,name=fire_resist_tops,json=fireResistTops,proto3" json:"fire_resist_tops,omitempty"`
}

func (x *FireBuildingRiskAnalyseGetFireResistTopsResponse) Reset() {
	*x = FireBuildingRiskAnalyseGetFireResistTopsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetFireResistTopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetFireResistTopsResponse) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetFireResistTopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetFireResistTopsResponse.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetFireResistTopsResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{7}
}

func (x *FireBuildingRiskAnalyseGetFireResistTopsResponse) GetFireResistTops() []*FireResist {
	if x != nil {
		return x.FireResistTops
	}
	return nil
}

type FireSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *FireSource) Reset() {
	*x = FireSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireSource) ProtoMessage() {}

func (x *FireSource) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireSource.ProtoReflect.Descriptor instead.
func (*FireSource) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{8}
}

func (x *FireSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FireSource) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type FireBuildingRiskAnalyseGetFireSourceFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureRequest) Reset() {
	*x = FireBuildingRiskAnalyseGetFireSourceFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetFireSourceFeatureRequest) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetFireSourceFeatureRequest.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetFireSourceFeatureRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{9}
}

type FireBuildingRiskAnalyseGetFireSourceFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireSourceFeatures []*FireSource `protobuf:"bytes,1,rep,name=fire_source_features,json=fireSourceFeatures,proto3" json:"fire_source_features,omitempty"`
}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureResponse) Reset() {
	*x = FireBuildingRiskAnalyseGetFireSourceFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetFireSourceFeatureResponse) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetFireSourceFeatureResponse.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetFireSourceFeatureResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{10}
}

func (x *FireBuildingRiskAnalyseGetFireSourceFeatureResponse) GetFireSourceFeatures() []*FireSource {
	if x != nil {
		return x.FireSourceFeatures
	}
	return nil
}

type FireFightPowerProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *FireFightPowerProperty) Reset() {
	*x = FireFightPowerProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireFightPowerProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireFightPowerProperty) ProtoMessage() {}

func (x *FireFightPowerProperty) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireFightPowerProperty.ProtoReflect.Descriptor instead.
func (*FireFightPowerProperty) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{11}
}

func (x *FireFightPowerProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FireFightPowerProperty) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type FireFightPowerDis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *FireFightPowerDis) Reset() {
	*x = FireFightPowerDis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireFightPowerDis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireFightPowerDis) ProtoMessage() {}

func (x *FireFightPowerDis) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireFightPowerDis.ProtoReflect.Descriptor instead.
func (*FireFightPowerDis) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{12}
}

func (x *FireFightPowerDis) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FireFightPowerDis) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) Reset() {
	*x = FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{13}
}

type FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FireFightPowerProperty []*FireFightPowerProperty `protobuf:"bytes,1,rep,name=fire_fight_power_property,json=fireFightPowerProperty,proto3" json:"fire_fight_power_property,omitempty"`
	FireFightPowerDis      []*FireFightPowerDis      `protobuf:"bytes,2,rep,name=fire_fight_power_dis,json=fireFightPowerDis,proto3" json:"fire_fight_power_dis,omitempty"`
}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) Reset() {
	*x = FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) ProtoMessage() {}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse.ProtoReflect.Descriptor instead.
func (*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{14}
}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) GetFireFightPowerProperty() []*FireFightPowerProperty {
	if x != nil {
		return x.FireFightPowerProperty
	}
	return nil
}

func (x *FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse) GetFireFightPowerDis() []*FireFightPowerDis {
	if x != nil {
		return x.FireFightPowerDis
	}
	return nil
}

type BuildingFireRiskAnalyseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonFireRiskFeature string `protobuf:"bytes,1,opt,name=person_fire_risk_feature,json=personFireRiskFeature,proto3" json:"person_fire_risk_feature,omitempty"`
	AssetsFireRiskFeature string `protobuf:"bytes,2,opt,name=assets_fire_risk_feature,json=assetsFireRiskFeature,proto3" json:"assets_fire_risk_feature,omitempty"`
	SmokeFireRiskFeature  string `protobuf:"bytes,3,opt,name=smoke_fire_risk_feature,json=smokeFireRiskFeature,proto3" json:"smoke_fire_risk_feature,omitempty"`
}

func (x *BuildingFireRiskAnalyseRequest) Reset() {
	*x = BuildingFireRiskAnalyseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseRequest) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{15}
}

func (x *BuildingFireRiskAnalyseRequest) GetPersonFireRiskFeature() string {
	if x != nil {
		return x.PersonFireRiskFeature
	}
	return ""
}

func (x *BuildingFireRiskAnalyseRequest) GetAssetsFireRiskFeature() string {
	if x != nil {
		return x.AssetsFireRiskFeature
	}
	return ""
}

func (x *BuildingFireRiskAnalyseRequest) GetSmokeFireRiskFeature() string {
	if x != nil {
		return x.SmokeFireRiskFeature
	}
	return ""
}

type BuildingFireRiskAnalyseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonRiskFactorH  float32 `protobuf:"fixed32,1,opt,name=person_risk_factor_h,json=personRiskFactorH,proto3" json:"person_risk_factor_h,omitempty"`
	AssetsRiskFactorD  float32 `protobuf:"fixed32,2,opt,name=assets_risk_factor_d,json=assetsRiskFactorD,proto3" json:"assets_risk_factor_d,omitempty"`
	SmokeRiskFactorF   float32 `protobuf:"fixed32,3,opt,name=smoke_risk_factor_f,json=smokeRiskFactorF,proto3" json:"smoke_risk_factor_f,omitempty"`
	BuildingFireRiskIr float32 `protobuf:"fixed32,4,opt,name=building_fire_risk_ir,json=buildingFireRiskIr,proto3" json:"building_fire_risk_ir,omitempty"`
}

func (x *BuildingFireRiskAnalyseResponse) Reset() {
	*x = BuildingFireRiskAnalyseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseResponse) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{16}
}

func (x *BuildingFireRiskAnalyseResponse) GetPersonRiskFactorH() float32 {
	if x != nil {
		return x.PersonRiskFactorH
	}
	return 0
}

func (x *BuildingFireRiskAnalyseResponse) GetAssetsRiskFactorD() float32 {
	if x != nil {
		return x.AssetsRiskFactorD
	}
	return 0
}

func (x *BuildingFireRiskAnalyseResponse) GetSmokeRiskFactorF() float32 {
	if x != nil {
		return x.SmokeRiskFactorF
	}
	return 0
}

func (x *BuildingFireRiskAnalyseResponse) GetBuildingFireRiskIr() float32 {
	if x != nil {
		return x.BuildingFireRiskIr
	}
	return 0
}

type RiskFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RiskFeature) Reset() {
	*x = RiskFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFeature) ProtoMessage() {}

func (x *RiskFeature) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFeature.ProtoReflect.Descriptor instead.
func (*RiskFeature) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{17}
}

func (x *RiskFeature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RiskFeature) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type BuildingFireRiskAnalyseGetPersonRiskFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) Reset() {
	*x = BuildingFireRiskAnalyseGetPersonRiskFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseGetPersonRiskFeatureRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseGetPersonRiskFeatureRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{18}
}

type BuildingFireRiskAnalyseGetPersonRiskFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonRiskFeature []*RiskFeature `protobuf:"bytes,1,rep,name=person_risk_feature,json=personRiskFeature,proto3" json:"person_risk_feature,omitempty"`
}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureResponse) Reset() {
	*x = BuildingFireRiskAnalyseGetPersonRiskFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseGetPersonRiskFeatureResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{19}
}

func (x *BuildingFireRiskAnalyseGetPersonRiskFeatureResponse) GetPersonRiskFeature() []*RiskFeature {
	if x != nil {
		return x.PersonRiskFeature
	}
	return nil
}

type BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) Reset() {
	*x = BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{20}
}

type BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetsRiskFeature []*RiskFeature `protobuf:"bytes,1,rep,name=assets_risk_feature,json=assetsRiskFeature,proto3" json:"assets_risk_feature,omitempty"`
}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse) Reset() {
	*x = BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{21}
}

func (x *BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse) GetAssetsRiskFeature() []*RiskFeature {
	if x != nil {
		return x.AssetsRiskFeature
	}
	return nil
}

type BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) Reset() {
	*x = BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{22}
}

type BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmokeRiskFeature []*RiskFeature `protobuf:"bytes,1,rep,name=smoke_risk_feature,json=smokeRiskFeature,proto3" json:"smoke_risk_feature,omitempty"`
}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse) Reset() {
	*x = BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse) ProtoMessage() {}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{23}
}

func (x *BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse) GetSmokeRiskFeature() []*RiskFeature {
	if x != nil {
		return x.SmokeRiskFeature
	}
	return nil
}

type BuildingFireRiskTotalAnalyseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingRisk_GR     string `protobuf:"bytes,1,opt,name=building_risk_GR,json=buildingRiskGR,proto3" json:"building_risk_GR,omitempty"`
	BuildingFireRisk_IR string `protobuf:"bytes,2,opt,name=building_fire_risk_IR,json=buildingFireRiskIR,proto3" json:"building_fire_risk_IR,omitempty"`
}

func (x *BuildingFireRiskTotalAnalyseRequest) Reset() {
	*x = BuildingFireRiskTotalAnalyseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskTotalAnalyseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskTotalAnalyseRequest) ProtoMessage() {}

func (x *BuildingFireRiskTotalAnalyseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskTotalAnalyseRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskTotalAnalyseRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{24}
}

func (x *BuildingFireRiskTotalAnalyseRequest) GetBuildingRisk_GR() string {
	if x != nil {
		return x.BuildingRisk_GR
	}
	return ""
}

func (x *BuildingFireRiskTotalAnalyseRequest) GetBuildingFireRisk_IR() string {
	if x != nil {
		return x.BuildingFireRisk_IR
	}
	return ""
}

type BuildingFireRiskTotalAnalyseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conclusion string `protobuf:"bytes,1,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
}

func (x *BuildingFireRiskTotalAnalyseResponse) Reset() {
	*x = BuildingFireRiskTotalAnalyseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskTotalAnalyseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskTotalAnalyseResponse) ProtoMessage() {}

func (x *BuildingFireRiskTotalAnalyseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskTotalAnalyseResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskTotalAnalyseResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{25}
}

func (x *BuildingFireRiskTotalAnalyseResponse) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

type BuildingFireRiskTotalAnalyseSavePointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *BuildingFireRiskTotalAnalyseSavePointRequest) Reset() {
	*x = BuildingFireRiskTotalAnalyseSavePointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskTotalAnalyseSavePointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskTotalAnalyseSavePointRequest) ProtoMessage() {}

func (x *BuildingFireRiskTotalAnalyseSavePointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskTotalAnalyseSavePointRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskTotalAnalyseSavePointRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{26}
}

func (x *BuildingFireRiskTotalAnalyseSavePointRequest) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BuildingFireRiskTotalAnalyseSavePointRequest) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type BuildingFireRiskTotalAnalyseSavePointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildingFireRiskTotalAnalyseSavePointResponse) Reset() {
	*x = BuildingFireRiskTotalAnalyseSavePointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskTotalAnalyseSavePointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskTotalAnalyseSavePointResponse) ProtoMessage() {}

func (x *BuildingFireRiskTotalAnalyseSavePointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskTotalAnalyseSavePointResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskTotalAnalyseSavePointResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{27}
}

type BuildingFireRiskTotalAnalyseGetPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildingFireRiskTotalAnalyseGetPointRequest) Reset() {
	*x = BuildingFireRiskTotalAnalyseGetPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskTotalAnalyseGetPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskTotalAnalyseGetPointRequest) ProtoMessage() {}

func (x *BuildingFireRiskTotalAnalyseGetPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskTotalAnalyseGetPointRequest.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskTotalAnalyseGetPointRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{28}
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{29}
}

func (x *Point) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type BuildingFireRiskTotalAnalyseGetPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *BuildingFireRiskTotalAnalyseGetPointResponse) Reset() {
	*x = BuildingFireRiskTotalAnalyseGetPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFireRiskTotalAnalyseGetPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFireRiskTotalAnalyseGetPointResponse) ProtoMessage() {}

func (x *BuildingFireRiskTotalAnalyseGetPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFireRiskTotalAnalyseGetPointResponse.ProtoReflect.Descriptor instead.
func (*BuildingFireRiskTotalAnalyseGetPointResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{30}
}

func (x *BuildingFireRiskTotalAnalyseGetPointResponse) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type QiGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QiGetRequest) Reset() {
	*x = QiGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QiGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QiGetRequest) ProtoMessage() {}

func (x *QiGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QiGetRequest.ProtoReflect.Descriptor instead.
func (*QiGetRequest) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{31}
}

type Qi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code float32 `protobuf:"fixed32,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Qi) Reset() {
	*x = Qi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qi) ProtoMessage() {}

func (x *Qi) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qi.ProtoReflect.Descriptor instead.
func (*Qi) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{32}
}

func (x *Qi) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Qi) GetCode() float32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type QiGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qis []*Qi `protobuf:"bytes,1,rep,name=qis,proto3" json:"qis,omitempty"`
}

func (x *QiGetResponse) Reset() {
	*x = QiGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gustav_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QiGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QiGetResponse) ProtoMessage() {}

func (x *QiGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gustav_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QiGetResponse.ProtoReflect.Descriptor instead.
func (*QiGetResponse) Descriptor() ([]byte, []int) {
	return file_gustav_proto_rawDescGZIP(), []int{33}
}

func (x *QiGetResponse) GetQis() []*Qi {
	if x != nil {
		return x.Qis
	}
	return nil
}

var File_gustav_proto protoreflect.FileDescriptor

var file_gustav_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x22, 0xe0, 0x02, 0x0a, 0x1e, 0x46, 0x69, 0x72, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x72, 0x65, 0x61, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x51, 0x69, 0x22, 0xa9, 0x03, 0x0a, 0x1f, 0x46, 0x69,
	0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x18, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x71, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x51, 0x6d, 0x12, 0x38, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66, 0x69, 0x72, 0x65, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x12,
	0x37, 0x0a, 0x18, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x66, 0x69, 0x72, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x67, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x69, 0x73, 0x6b, 0x47, 0x72, 0x22, 0x35, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x31,
	0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x75, 0x73,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x76, 0x0a, 0x32, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x75,
	0x73, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x43, 0x6f, 0x6d, 0x62,
	0x75, 0x73, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x46, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x31, 0x0a, 0x2f, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x70, 0x0a, 0x30, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x70, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x32, 0x46, 0x69,
	0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x33, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x66, 0x69, 0x72, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x40, 0x0a,
	0x16, 0x46, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3b, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x3a,
	0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x3b, 0x46,
	0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x66, 0x69,
	0x72, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x16, 0x66,
	0x69, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x69, 0x73, 0x52, 0x11,
	0x66, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x72, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x5f,
	0x66, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x1f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x72, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x72, 0x22, 0x35, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x32,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x7a, 0x0a, 0x33, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x34,
	0x0a, 0x32, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x33, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61,
	0x76, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x33, 0x0a, 0x31, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x53, 0x6d,
	0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x32, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x23, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x47, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x47, 0x52,
	0x12, 0x31, 0x0a, 0x15, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x49, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x49, 0x52, 0x22, 0x46, 0x0a, 0x24, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x2c, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x2f, 0x0a, 0x2d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x2b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x55, 0x0a, 0x2c,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67,
	0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x51, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x02, 0x51, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x2d, 0x0a, 0x0d, 0x51, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x71, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x51, 0x69, 0x52, 0x03, 0x71, 0x69, 0x73,
	0x32, 0xeb, 0x0e, 0x0a, 0x0d, 0x47, 0x75, 0x73, 0x74, 0x61, 0x76, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x12, 0x26, 0x2e,
	0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x2a, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x75, 0x73, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x2e,
	0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x62, 0x75, 0x73, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61,
	0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62,
	0x75, 0x73, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x28, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70,
	0x73, 0x12, 0x37, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x75, 0x73,
	0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x2b, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbe, 0x01,
	0x0a, 0x33, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x12, 0x42, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x75, 0x73, 0x74,
	0x61, 0x76, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x44, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x51, 0x69, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76,
	0x2e, 0x51, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x51, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x12,
	0x26, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa6, 0x01, 0x0a, 0x2b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72,
	0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x3a, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67,
	0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x2b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x69,
	0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x2e, 0x67, 0x75, 0x73, 0x74,
	0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x39, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x65, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67,
	0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61,
	0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x25, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x2e,
	0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x24, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x75, 0x73, 0x74, 0x61,
	0x76, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a,
	0x5a, 0x18, 0x73, 0x61, 0x66, 0x65, 0x2f, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x2f, 0x67, 0x65,
	0x6e, 0x3b, 0x67, 0x75, 0x73, 0x74, 0x61, 0x76, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_gustav_proto_rawDescOnce sync.Once
	file_gustav_proto_rawDescData = file_gustav_proto_rawDesc
)

func file_gustav_proto_rawDescGZIP() []byte {
	file_gustav_proto_rawDescOnce.Do(func() {
		file_gustav_proto_rawDescData = protoimpl.X.CompressGZIP(file_gustav_proto_rawDescData)
	})
	return file_gustav_proto_rawDescData
}

var file_gustav_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_gustav_proto_goTypes = []interface{}{
	(*FireBuildingRiskAnalyseRequest)(nil),                              // 0: gustav.FireBuildingRiskAnalyseRequest
	(*FireBuildingRiskAnalyseResponse)(nil),                             // 1: gustav.FireBuildingRiskAnalyseResponse
	(*Combustible)(nil),                                                 // 2: gustav.Combustible
	(*FireBuildingRiskAnalyseGetCombustibleNamesRequest)(nil),           // 3: gustav.FireBuildingRiskAnalyseGetCombustibleNamesRequest
	(*FireBuildingRiskAnalyseGetCombustibleNamesResponse)(nil),          // 4: gustav.FireBuildingRiskAnalyseGetCombustibleNamesResponse
	(*FireResist)(nil),                                                  // 5: gustav.FireResist
	(*FireBuildingRiskAnalyseGetFireResistTopsRequest)(nil),             // 6: gustav.FireBuildingRiskAnalyseGetFireResistTopsRequest
	(*FireBuildingRiskAnalyseGetFireResistTopsResponse)(nil),            // 7: gustav.FireBuildingRiskAnalyseGetFireResistTopsResponse
	(*FireSource)(nil),                                                  // 8: gustav.FireSource
	(*FireBuildingRiskAnalyseGetFireSourceFeatureRequest)(nil),          // 9: gustav.FireBuildingRiskAnalyseGetFireSourceFeatureRequest
	(*FireBuildingRiskAnalyseGetFireSourceFeatureResponse)(nil),         // 10: gustav.FireBuildingRiskAnalyseGetFireSourceFeatureResponse
	(*FireFightPowerProperty)(nil),                                      // 11: gustav.FireFightPowerProperty
	(*FireFightPowerDis)(nil),                                           // 12: gustav.FireFightPowerDis
	(*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest)(nil),  // 13: gustav.FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest
	(*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse)(nil), // 14: gustav.FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse
	(*BuildingFireRiskAnalyseRequest)(nil),                              // 15: gustav.BuildingFireRiskAnalyseRequest
	(*BuildingFireRiskAnalyseResponse)(nil),                             // 16: gustav.BuildingFireRiskAnalyseResponse
	(*RiskFeature)(nil),                                                 // 17: gustav.RiskFeature
	(*BuildingFireRiskAnalyseGetPersonRiskFeatureRequest)(nil),          // 18: gustav.BuildingFireRiskAnalyseGetPersonRiskFeatureRequest
	(*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse)(nil),         // 19: gustav.BuildingFireRiskAnalyseGetPersonRiskFeatureResponse
	(*BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest)(nil),          // 20: gustav.BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest
	(*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse)(nil),         // 21: gustav.BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse
	(*BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest)(nil),           // 22: gustav.BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest
	(*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse)(nil),          // 23: gustav.BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse
	(*BuildingFireRiskTotalAnalyseRequest)(nil),                         // 24: gustav.BuildingFireRiskTotalAnalyseRequest
	(*BuildingFireRiskTotalAnalyseResponse)(nil),                        // 25: gustav.BuildingFireRiskTotalAnalyseResponse
	(*BuildingFireRiskTotalAnalyseSavePointRequest)(nil),                // 26: gustav.BuildingFireRiskTotalAnalyseSavePointRequest
	(*BuildingFireRiskTotalAnalyseSavePointResponse)(nil),               // 27: gustav.BuildingFireRiskTotalAnalyseSavePointResponse
	(*BuildingFireRiskTotalAnalyseGetPointRequest)(nil),                 // 28: gustav.BuildingFireRiskTotalAnalyseGetPointRequest
	(*Point)(nil), // 29: gustav.Point
	(*BuildingFireRiskTotalAnalyseGetPointResponse)(nil), // 30: gustav.BuildingFireRiskTotalAnalyseGetPointResponse
	(*QiGetRequest)(nil),  // 31: gustav.QiGetRequest
	(*Qi)(nil),            // 32: gustav.Qi
	(*QiGetResponse)(nil), // 33: gustav.QiGetResponse
}
var file_gustav_proto_depIdxs = []int32{
	2,  // 0: gustav.FireBuildingRiskAnalyseGetCombustibleNamesResponse.combustible_names:type_name -> gustav.Combustible
	5,  // 1: gustav.FireBuildingRiskAnalyseGetFireResistTopsResponse.fire_resist_tops:type_name -> gustav.FireResist
	8,  // 2: gustav.FireBuildingRiskAnalyseGetFireSourceFeatureResponse.fire_source_features:type_name -> gustav.FireSource
	11, // 3: gustav.FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse.fire_fight_power_property:type_name -> gustav.FireFightPowerProperty
	12, // 4: gustav.FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse.fire_fight_power_dis:type_name -> gustav.FireFightPowerDis
	17, // 5: gustav.BuildingFireRiskAnalyseGetPersonRiskFeatureResponse.person_risk_feature:type_name -> gustav.RiskFeature
	17, // 6: gustav.BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse.assets_risk_feature:type_name -> gustav.RiskFeature
	17, // 7: gustav.BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse.smoke_risk_feature:type_name -> gustav.RiskFeature
	29, // 8: gustav.BuildingFireRiskTotalAnalyseGetPointResponse.points:type_name -> gustav.Point
	32, // 9: gustav.QiGetResponse.qis:type_name -> gustav.Qi
	0,  // 10: gustav.GustavService.FireBuildingRiskAnalyse:input_type -> gustav.FireBuildingRiskAnalyseRequest
	3,  // 11: gustav.GustavService.FireBuildingRiskAnalyseGetCombustibleNames:input_type -> gustav.FireBuildingRiskAnalyseGetCombustibleNamesRequest
	6,  // 12: gustav.GustavService.FireBuildingRiskAnalyseGetFireResistTops:input_type -> gustav.FireBuildingRiskAnalyseGetFireResistTopsRequest
	9,  // 13: gustav.GustavService.FireBuildingRiskAnalyseGetFireSourceFeature:input_type -> gustav.FireBuildingRiskAnalyseGetFireSourceFeatureRequest
	13, // 14: gustav.GustavService.FireBuildingRiskAnalyseGetFireFightPowerPropertyDis:input_type -> gustav.FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest
	31, // 15: gustav.GustavService.QiGet:input_type -> gustav.QiGetRequest
	15, // 16: gustav.GustavService.BuildingFireRiskAnalyse:input_type -> gustav.BuildingFireRiskAnalyseRequest
	18, // 17: gustav.GustavService.BuildingFireRiskAnalyseGetPersonRiskFeature:input_type -> gustav.BuildingFireRiskAnalyseGetPersonRiskFeatureRequest
	20, // 18: gustav.GustavService.BuildingFireRiskAnalyseGetAssetsRiskFeature:input_type -> gustav.BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest
	22, // 19: gustav.GustavService.BuildingFireRiskAnalyseGetSmokeRiskFeature:input_type -> gustav.BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest
	24, // 20: gustav.GustavService.BuildingFireRiskTotalAnalyse:input_type -> gustav.BuildingFireRiskTotalAnalyseRequest
	26, // 21: gustav.GustavService.BuildingFireRiskTotalAnalyseSavePoint:input_type -> gustav.BuildingFireRiskTotalAnalyseSavePointRequest
	28, // 22: gustav.GustavService.BuildingFireRiskTotalAnalyseGetPoint:input_type -> gustav.BuildingFireRiskTotalAnalyseGetPointRequest
	1,  // 23: gustav.GustavService.FireBuildingRiskAnalyse:output_type -> gustav.FireBuildingRiskAnalyseResponse
	4,  // 24: gustav.GustavService.FireBuildingRiskAnalyseGetCombustibleNames:output_type -> gustav.FireBuildingRiskAnalyseGetCombustibleNamesResponse
	7,  // 25: gustav.GustavService.FireBuildingRiskAnalyseGetFireResistTops:output_type -> gustav.FireBuildingRiskAnalyseGetFireResistTopsResponse
	10, // 26: gustav.GustavService.FireBuildingRiskAnalyseGetFireSourceFeature:output_type -> gustav.FireBuildingRiskAnalyseGetFireSourceFeatureResponse
	14, // 27: gustav.GustavService.FireBuildingRiskAnalyseGetFireFightPowerPropertyDis:output_type -> gustav.FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse
	33, // 28: gustav.GustavService.QiGet:output_type -> gustav.QiGetResponse
	16, // 29: gustav.GustavService.BuildingFireRiskAnalyse:output_type -> gustav.BuildingFireRiskAnalyseResponse
	19, // 30: gustav.GustavService.BuildingFireRiskAnalyseGetPersonRiskFeature:output_type -> gustav.BuildingFireRiskAnalyseGetPersonRiskFeatureResponse
	21, // 31: gustav.GustavService.BuildingFireRiskAnalyseGetAssetsRiskFeature:output_type -> gustav.BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse
	23, // 32: gustav.GustavService.BuildingFireRiskAnalyseGetSmokeRiskFeature:output_type -> gustav.BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse
	25, // 33: gustav.GustavService.BuildingFireRiskTotalAnalyse:output_type -> gustav.BuildingFireRiskTotalAnalyseResponse
	27, // 34: gustav.GustavService.BuildingFireRiskTotalAnalyseSavePoint:output_type -> gustav.BuildingFireRiskTotalAnalyseSavePointResponse
	30, // 35: gustav.GustavService.BuildingFireRiskTotalAnalyseGetPoint:output_type -> gustav.BuildingFireRiskTotalAnalyseGetPointResponse
	23, // [23:36] is the sub-list for method output_type
	10, // [10:23] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gustav_proto_init() }
func file_gustav_proto_init() {
	if File_gustav_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gustav_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Combustible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetCombustibleNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetCombustibleNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireResist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetFireResistTopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetFireResistTopsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetFireSourceFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetFireSourceFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireFightPowerProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireFightPowerDis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireBuildingRiskAnalyseGetFireFightPowerPropertyDisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseGetPersonRiskFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseGetPersonRiskFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseGetAssetsRiskFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseGetAssetsRiskFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseGetSmokeRiskFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskAnalyseGetSmokeRiskFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskTotalAnalyseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskTotalAnalyseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskTotalAnalyseSavePointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskTotalAnalyseSavePointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskTotalAnalyseGetPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFireRiskTotalAnalyseGetPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QiGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gustav_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QiGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gustav_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gustav_proto_goTypes,
		DependencyIndexes: file_gustav_proto_depIdxs,
		MessageInfos:      file_gustav_proto_msgTypes,
	}.Build()
	File_gustav_proto = out.File
	file_gustav_proto_rawDesc = nil
	file_gustav_proto_goTypes = nil
	file_gustav_proto_depIdxs = nil
}
