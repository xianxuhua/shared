// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: engineering.proto

package engineeringpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EngineeringService_FireLoadFactor_FullMethodName       = "/engineering.EngineeringService/FireLoadFactor"
	EngineeringService_AreaFactor_FullMethodName           = "/engineering.EngineeringService/AreaFactor"
	EngineeringService_FireSpreadFactor_FullMethodName     = "/engineering.EngineeringService/FireSpreadFactor"
	EngineeringService_VentilationFactor_FullMethodName    = "/engineering.EngineeringService/VentilationFactor"
	EngineeringService_ChannelFactor_FullMethodName        = "/engineering.EngineeringService/ChannelFactor"
	EngineeringService_FloorFactor_FullMethodName          = "/engineering.EngineeringService/FloorFactor"
	EngineeringService_PotentialRisk_FullMethodName        = "/engineering.EngineeringService/PotentialRisk"
	EngineeringService_ActivityFactor_FullMethodName       = "/engineering.EngineeringService/ActivityFactor"
	EngineeringService_EvacuationTimeFactor_FullMethodName = "/engineering.EngineeringService/EvacuationTimeFactor"
	EngineeringService_ProtectionLevel_FullMethodName      = "/engineering.EngineeringService/ProtectionLevel"
	EngineeringService_AcceptanceCriteria_FullMethodName   = "/engineering.EngineeringService/AcceptanceCriteria"
	EngineeringService_FireRisk_FullMethodName             = "/engineering.EngineeringService/FireRisk"
)

// EngineeringServiceClient is the client API for EngineeringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineeringServiceClient interface {
	// 火灾荷载因子
	FireLoadFactor(ctx context.Context, in *FireLoadFactorRequest, opts ...grpc.CallOption) (*FireLoadFactorResponse, error)
	// 面积因子
	AreaFactor(ctx context.Context, in *AreaFactorRequest, opts ...grpc.CallOption) (*AreaFactorResponse, error)
	// 火灾蔓延因子
	FireSpreadFactor(ctx context.Context, in *FireSpreadFactorRequest, opts ...grpc.CallOption) (*FireSpreadFactorResponse, error)
	// 通风因子
	VentilationFactor(ctx context.Context, in *VentilationFactorRequest, opts ...grpc.CallOption) (*VentilationFactorResponse, error)
	// 通道因子
	ChannelFactor(ctx context.Context, in *ChannelFactorRequest, opts ...grpc.CallOption) (*ChannelFactorResponse, error)
	// 楼层因子
	FloorFactor(ctx context.Context, in *FloorFactorRequest, opts ...grpc.CallOption) (*FloorFactorResponse, error)
	// 潜在风险
	PotentialRisk(ctx context.Context, in *PotentialRiskRequest, opts ...grpc.CallOption) (*PotentialRiskResponse, error)
	// 活动因子
	ActivityFactor(ctx context.Context, in *ActivityFactorRequest, opts ...grpc.CallOption) (*ActivityFactorResponse, error)
	// 疏散时间因子
	EvacuationTimeFactor(ctx context.Context, in *EvacuationTimeFactorRequest, opts ...grpc.CallOption) (*EvacuationTimeFactorResponse, error)
	// 保护水平
	ProtectionLevel(ctx context.Context, in *ProtectionLevelRequest, opts ...grpc.CallOption) (*ProtectionLevelResponse, error)
	// 接受标准
	AcceptanceCriteria(ctx context.Context, in *AcceptanceCriteriaRequest, opts ...grpc.CallOption) (*AcceptanceCriteriaResponse, error)
	// 火灾风险
	FireRisk(ctx context.Context, in *FireRiskRequest, opts ...grpc.CallOption) (*FireRiskResponse, error)
}

type engineeringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineeringServiceClient(cc grpc.ClientConnInterface) EngineeringServiceClient {
	return &engineeringServiceClient{cc}
}

func (c *engineeringServiceClient) FireLoadFactor(ctx context.Context, in *FireLoadFactorRequest, opts ...grpc.CallOption) (*FireLoadFactorResponse, error) {
	out := new(FireLoadFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_FireLoadFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) AreaFactor(ctx context.Context, in *AreaFactorRequest, opts ...grpc.CallOption) (*AreaFactorResponse, error) {
	out := new(AreaFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_AreaFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) FireSpreadFactor(ctx context.Context, in *FireSpreadFactorRequest, opts ...grpc.CallOption) (*FireSpreadFactorResponse, error) {
	out := new(FireSpreadFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_FireSpreadFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) VentilationFactor(ctx context.Context, in *VentilationFactorRequest, opts ...grpc.CallOption) (*VentilationFactorResponse, error) {
	out := new(VentilationFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_VentilationFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) ChannelFactor(ctx context.Context, in *ChannelFactorRequest, opts ...grpc.CallOption) (*ChannelFactorResponse, error) {
	out := new(ChannelFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_ChannelFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) FloorFactor(ctx context.Context, in *FloorFactorRequest, opts ...grpc.CallOption) (*FloorFactorResponse, error) {
	out := new(FloorFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_FloorFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) PotentialRisk(ctx context.Context, in *PotentialRiskRequest, opts ...grpc.CallOption) (*PotentialRiskResponse, error) {
	out := new(PotentialRiskResponse)
	err := c.cc.Invoke(ctx, EngineeringService_PotentialRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) ActivityFactor(ctx context.Context, in *ActivityFactorRequest, opts ...grpc.CallOption) (*ActivityFactorResponse, error) {
	out := new(ActivityFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_ActivityFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) EvacuationTimeFactor(ctx context.Context, in *EvacuationTimeFactorRequest, opts ...grpc.CallOption) (*EvacuationTimeFactorResponse, error) {
	out := new(EvacuationTimeFactorResponse)
	err := c.cc.Invoke(ctx, EngineeringService_EvacuationTimeFactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) ProtectionLevel(ctx context.Context, in *ProtectionLevelRequest, opts ...grpc.CallOption) (*ProtectionLevelResponse, error) {
	out := new(ProtectionLevelResponse)
	err := c.cc.Invoke(ctx, EngineeringService_ProtectionLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) AcceptanceCriteria(ctx context.Context, in *AcceptanceCriteriaRequest, opts ...grpc.CallOption) (*AcceptanceCriteriaResponse, error) {
	out := new(AcceptanceCriteriaResponse)
	err := c.cc.Invoke(ctx, EngineeringService_AcceptanceCriteria_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineeringServiceClient) FireRisk(ctx context.Context, in *FireRiskRequest, opts ...grpc.CallOption) (*FireRiskResponse, error) {
	out := new(FireRiskResponse)
	err := c.cc.Invoke(ctx, EngineeringService_FireRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineeringServiceServer is the server API for EngineeringService service.
// All implementations must embed UnimplementedEngineeringServiceServer
// for forward compatibility
type EngineeringServiceServer interface {
	// 火灾荷载因子
	FireLoadFactor(context.Context, *FireLoadFactorRequest) (*FireLoadFactorResponse, error)
	// 面积因子
	AreaFactor(context.Context, *AreaFactorRequest) (*AreaFactorResponse, error)
	// 火灾蔓延因子
	FireSpreadFactor(context.Context, *FireSpreadFactorRequest) (*FireSpreadFactorResponse, error)
	// 通风因子
	VentilationFactor(context.Context, *VentilationFactorRequest) (*VentilationFactorResponse, error)
	// 通道因子
	ChannelFactor(context.Context, *ChannelFactorRequest) (*ChannelFactorResponse, error)
	// 楼层因子
	FloorFactor(context.Context, *FloorFactorRequest) (*FloorFactorResponse, error)
	// 潜在风险
	PotentialRisk(context.Context, *PotentialRiskRequest) (*PotentialRiskResponse, error)
	// 活动因子
	ActivityFactor(context.Context, *ActivityFactorRequest) (*ActivityFactorResponse, error)
	// 疏散时间因子
	EvacuationTimeFactor(context.Context, *EvacuationTimeFactorRequest) (*EvacuationTimeFactorResponse, error)
	// 保护水平
	ProtectionLevel(context.Context, *ProtectionLevelRequest) (*ProtectionLevelResponse, error)
	// 接受标准
	AcceptanceCriteria(context.Context, *AcceptanceCriteriaRequest) (*AcceptanceCriteriaResponse, error)
	// 火灾风险
	FireRisk(context.Context, *FireRiskRequest) (*FireRiskResponse, error)
	mustEmbedUnimplementedEngineeringServiceServer()
}

// UnimplementedEngineeringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEngineeringServiceServer struct {
}

func (UnimplementedEngineeringServiceServer) FireLoadFactor(context.Context, *FireLoadFactorRequest) (*FireLoadFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireLoadFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) AreaFactor(context.Context, *AreaFactorRequest) (*AreaFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) FireSpreadFactor(context.Context, *FireSpreadFactorRequest) (*FireSpreadFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireSpreadFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) VentilationFactor(context.Context, *VentilationFactorRequest) (*VentilationFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VentilationFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) ChannelFactor(context.Context, *ChannelFactorRequest) (*ChannelFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) FloorFactor(context.Context, *FloorFactorRequest) (*FloorFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FloorFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) PotentialRisk(context.Context, *PotentialRiskRequest) (*PotentialRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PotentialRisk not implemented")
}
func (UnimplementedEngineeringServiceServer) ActivityFactor(context.Context, *ActivityFactorRequest) (*ActivityFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) EvacuationTimeFactor(context.Context, *EvacuationTimeFactorRequest) (*EvacuationTimeFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvacuationTimeFactor not implemented")
}
func (UnimplementedEngineeringServiceServer) ProtectionLevel(context.Context, *ProtectionLevelRequest) (*ProtectionLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectionLevel not implemented")
}
func (UnimplementedEngineeringServiceServer) AcceptanceCriteria(context.Context, *AcceptanceCriteriaRequest) (*AcceptanceCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptanceCriteria not implemented")
}
func (UnimplementedEngineeringServiceServer) FireRisk(context.Context, *FireRiskRequest) (*FireRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireRisk not implemented")
}
func (UnimplementedEngineeringServiceServer) mustEmbedUnimplementedEngineeringServiceServer() {}

// UnsafeEngineeringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineeringServiceServer will
// result in compilation errors.
type UnsafeEngineeringServiceServer interface {
	mustEmbedUnimplementedEngineeringServiceServer()
}

func RegisterEngineeringServiceServer(s grpc.ServiceRegistrar, srv EngineeringServiceServer) {
	s.RegisterService(&EngineeringService_ServiceDesc, srv)
}

func _EngineeringService_FireLoadFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireLoadFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).FireLoadFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_FireLoadFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).FireLoadFactor(ctx, req.(*FireLoadFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_AreaFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).AreaFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_AreaFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).AreaFactor(ctx, req.(*AreaFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_FireSpreadFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireSpreadFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).FireSpreadFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_FireSpreadFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).FireSpreadFactor(ctx, req.(*FireSpreadFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_VentilationFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VentilationFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).VentilationFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_VentilationFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).VentilationFactor(ctx, req.(*VentilationFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_ChannelFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).ChannelFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_ChannelFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).ChannelFactor(ctx, req.(*ChannelFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_FloorFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloorFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).FloorFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_FloorFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).FloorFactor(ctx, req.(*FloorFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_PotentialRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PotentialRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).PotentialRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_PotentialRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).PotentialRisk(ctx, req.(*PotentialRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_ActivityFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).ActivityFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_ActivityFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).ActivityFactor(ctx, req.(*ActivityFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_EvacuationTimeFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvacuationTimeFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).EvacuationTimeFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_EvacuationTimeFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).EvacuationTimeFactor(ctx, req.(*EvacuationTimeFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_ProtectionLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectionLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).ProtectionLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_ProtectionLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).ProtectionLevel(ctx, req.(*ProtectionLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_AcceptanceCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptanceCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).AcceptanceCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_AcceptanceCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).AcceptanceCriteria(ctx, req.(*AcceptanceCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineeringService_FireRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FireRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineeringServiceServer).FireRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineeringService_FireRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineeringServiceServer).FireRisk(ctx, req.(*FireRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineeringService_ServiceDesc is the grpc.ServiceDesc for EngineeringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineeringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engineering.EngineeringService",
	HandlerType: (*EngineeringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireLoadFactor",
			Handler:    _EngineeringService_FireLoadFactor_Handler,
		},
		{
			MethodName: "AreaFactor",
			Handler:    _EngineeringService_AreaFactor_Handler,
		},
		{
			MethodName: "FireSpreadFactor",
			Handler:    _EngineeringService_FireSpreadFactor_Handler,
		},
		{
			MethodName: "VentilationFactor",
			Handler:    _EngineeringService_VentilationFactor_Handler,
		},
		{
			MethodName: "ChannelFactor",
			Handler:    _EngineeringService_ChannelFactor_Handler,
		},
		{
			MethodName: "FloorFactor",
			Handler:    _EngineeringService_FloorFactor_Handler,
		},
		{
			MethodName: "PotentialRisk",
			Handler:    _EngineeringService_PotentialRisk_Handler,
		},
		{
			MethodName: "ActivityFactor",
			Handler:    _EngineeringService_ActivityFactor_Handler,
		},
		{
			MethodName: "EvacuationTimeFactor",
			Handler:    _EngineeringService_EvacuationTimeFactor_Handler,
		},
		{
			MethodName: "ProtectionLevel",
			Handler:    _EngineeringService_ProtectionLevel_Handler,
		},
		{
			MethodName: "AcceptanceCriteria",
			Handler:    _EngineeringService_AcceptanceCriteria_Handler,
		},
		{
			MethodName: "FireRisk",
			Handler:    _EngineeringService_FireRisk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engineering.proto",
}
